
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArbolSemantico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArbolSemantico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArbolSemantico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArbolSemantico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\015\000\002\002" +
    "\003\000\002\014\005\000\002\014\003\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\004\006\000\002\035\010\000\002\035\007\000\002" +
    "\035\004\000\002\035\006\000\002\035\002\000\002\023" +
    "\006\000\002\023\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\033\005\000" +
    "\002\033\003\000\002\033\005\000\002\033\003\000\002" +
    "\025\007\000\002\055\005\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\004\000\002\055\004" +
    "\000\002\055\002\000\002\050\005\000\002\050\004\000" +
    "\002\050\002\000\002\006\012\000\002\006\011\000\002" +
    "\006\011\000\002\006\012\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\007" +
    "\000\002\007\004\000\002\010\015\000\002\010\012\000" +
    "\002\010\012\000\002\010\011\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\006\000\002\041" +
    "\005\000\002\044\003\000\002\044\003\000\002\030\004" +
    "\000\002\043\005\000\002\043\002\000\002\027\004\000" +
    "\002\042\005\000\002\042\002\000\002\026\010\000\002" +
    "\031\012\000\002\054\004\000\002\051\005\000\002\051" +
    "\002\000\002\052\004\000\002\053\005\000\002\053\002" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\046\003\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\015" +
    "\005\000\002\015\007\000\002\015\005\000\002\060\010" +
    "\000\002\062\007\000\002\036\007\000\002\036\010\000" +
    "\002\061\005\000\002\061\005\000\002\061\003\000\002" +
    "\061\003\000\002\061\005\000\002\061\003\000\002\056" +
    "\003\000\002\056\003\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\004\000\002\020\002" +
    "\000\002\045\006\000\002\045\005\000\002\005\010\000" +
    "\002\005\010\000\002\011\007\000\002\012\007\000\002" +
    "\017\004\000\002\040\004\000\002\040\003\000\002\037" +
    "\004\000\002\037\003\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\010\003\004\026\005\037\006\001\002\000" +
    "\006\002\uffff\026\uffff\001\002\000\010\003\004\026\005" +
    "\037\006\001\002\000\004\004\015\001\002\000\006\002" +
    "\uff89\026\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\010\002\uff8b\023\uff8b\026\012\001" +
    "\002\000\004\002\uff88\001\002\000\006\002\uff8c\023\uff8c" +
    "\001\002\000\020\003\027\026\025\034\uffe1\036\017\051" +
    "\020\053\026\055\024\001\002\000\004\026\u0124\001\002" +
    "\000\006\004\u010f\066\u010e\001\002\000\004\004\353\001" +
    "\002\000\004\026\351\001\002\000\004\034\144\001\002" +
    "\000\004\026\142\001\002\000\004\004\131\001\002\000" +
    "\022\003\027\023\uffe1\026\025\034\uffe1\036\017\051\020" +
    "\053\026\055\024\001\002\000\004\004\035\001\002\000" +
    "\022\003\027\023\uffe1\026\025\034\uffe1\036\017\051\020" +
    "\053\026\055\024\001\002\000\004\026\031\001\002\000" +
    "\022\003\027\023\uffe1\026\025\034\uffe1\036\017\051\020" +
    "\053\026\055\024\001\002\000\006\023\uffe5\034\uffe5\001" +
    "\002\000\006\023\uffe2\034\uffe2\001\002\000\004\054\040" +
    "\001\002\000\006\054\ufffd\061\036\001\002\000\004\004" +
    "\035\001\002\000\004\054\ufffe\001\002\000\012\004\126" +
    "\012\124\015\127\062\125\001\002\000\006\026\ufff3\031" +
    "\043\001\002\000\004\026\ufff8\001\002\000\020\004\055" +
    "\005\057\006\051\010\044\035\046\056\045\066\054\001" +
    "\002\000\010\004\110\005\057\010\044\001\002\000\004" +
    "\016\116\001\002\000\012\011\ufff0\026\ufff0\057\ufff0\061" +
    "\ufff0\001\002\000\012\011\uffef\026\uffef\057\uffef\061\uffef" +
    "\001\002\000\016\011\uffbe\024\113\026\uffbe\047\uffbe\057" +
    "\uffbe\061\uffbe\001\002\000\012\011\uffee\026\uffee\057\uffee" +
    "\061\uffee\001\002\000\020\011\uffbb\024\uffbb\025\106\026" +
    "\uffbb\047\uffbb\057\uffbb\061\uffbb\001\002\000\012\011\uffed" +
    "\026\uffed\057\uffed\061\uffed\001\002\000\004\004\101\001" +
    "\002\000\014\010\060\016\061\024\uffb9\025\uffb9\026\uffb9" +
    "\001\002\000\004\026\ufff5\001\002\000\054\003\uffba\004" +
    "\uffba\011\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047" +
    "\uffba\050\uffba\053\uffba\056\uffba\057\uffba\061\uffba\065\uffba" +
    "\001\002\000\020\004\065\005\057\006\051\010\044\011" +
    "\063\035\046\056\045\001\002\000\004\004\062\001\002" +
    "\000\054\003\uffb7\004\uffb7\011\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\030\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\053\uffb7\056\uffb7\057" +
    "\uffb7\061\uffb7\065\uffb7\001\002\000\004\026\ufff4\001\002" +
    "\000\006\011\uffe9\061\077\001\002\000\024\010\073\011" +
    "\uffb9\016\061\024\uffb9\025\uffb9\026\uffb9\047\uffb9\057\uffb9" +
    "\061\uffb9\001\002\000\006\011\uffeb\061\071\001\002\000" +
    "\004\011\070\001\002\000\004\026\ufff6\001\002\000\016" +
    "\004\065\005\057\006\051\010\044\035\046\056\045\001" +
    "\002\000\004\011\uffec\001\002\000\020\004\065\005\057" +
    "\006\051\010\044\011\074\035\046\056\045\001\002\000" +
    "\014\011\uff92\026\uff92\047\uff92\057\uff92\061\uff92\001\002" +
    "\000\004\011\076\001\002\000\014\011\uff93\026\uff93\047" +
    "\uff93\057\uff93\061\uff93\001\002\000\016\004\065\005\057" +
    "\006\051\010\044\035\046\056\045\001\002\000\004\011" +
    "\uffea\001\002\000\004\010\102\001\002\000\016\004\065" +
    "\005\057\006\051\010\044\035\046\056\045\001\002\000" +
    "\004\011\104\001\002\000\004\026\ufff7\001\002\000\016" +
    "\011\uffbd\024\uffbd\026\uffbd\047\uffbd\057\uffbd\061\uffbd\001" +
    "\002\000\010\004\110\005\057\010\044\001\002\000\020" +
    "\011\uffbb\024\uffbb\025\106\026\uffbb\047\uffbb\057\uffbb\061" +
    "\uffbb\001\002\000\056\003\uffb9\004\uffb9\011\uffb9\016\061" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\053\uffb9\056\uffb9\057\uffb9\061\uffb9\065\uffb9\001\002\000" +
    "\016\011\uffbc\024\uffbc\026\uffbc\047\uffbc\057\uffbc\061\uffbc" +
    "\001\002\000\014\011\uffc0\026\uffc0\047\uffc0\057\uffc0\061" +
    "\uffc0\001\002\000\010\004\110\005\057\010\044\001\002" +
    "\000\016\011\uffbe\024\113\026\uffbe\047\uffbe\057\uffbe\061" +
    "\uffbe\001\002\000\014\011\uffbf\026\uffbf\047\uffbf\057\uffbf" +
    "\061\uffbf\001\002\000\004\064\117\001\002\000\004\010" +
    "\120\001\002\000\004\011\121\001\002\000\012\011\uffad" +
    "\026\uffad\057\uffad\061\uffad\001\002\000\004\011\123\001" +
    "\002\000\054\003\uffb8\004\uffb8\011\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\030\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\053\uffb8\056\uffb8" +
    "\057\uffb8\061\uffb8\065\uffb8\001\002\000\040\003\ufffc\004" +
    "\ufffc\011\ufffc\023\ufffc\026\ufffc\030\ufffc\031\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\052\ufffc\053\ufffc\056\ufffc\061" +
    "\ufffc\001\002\000\040\003\ufffa\004\ufffa\011\ufffa\023\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\052\ufffa\053\ufffa\056\ufffa\061\ufffa\001\002\000\040" +
    "\003\ufff9\004\ufff9\011\ufff9\023\ufff9\026\ufff9\030\ufff9\031" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\052\ufff9\053\ufff9" +
    "\056\ufff9\061\ufff9\001\002\000\040\003\ufffb\004\ufffb\011" +
    "\ufffb\023\ufffb\026\ufffb\030\ufffb\031\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\052\ufffb\053\ufffb\056\ufffb\061\ufffb\001" +
    "\002\000\006\023\uffe3\034\uffe3\001\002\000\010\023\uffde" +
    "\026\133\053\026\001\002\000\004\026\140\001\002\000" +
    "\010\023\uffde\026\133\053\026\001\002\000\004\023\135" +
    "\001\002\000\004\055\136\001\002\000\004\026\uffe8\001" +
    "\002\000\004\023\uffdf\001\002\000\010\023\uffde\026\133" +
    "\053\026\001\002\000\004\023\uffe0\001\002\000\022\003" +
    "\027\023\uffe1\026\025\034\uffe1\036\017\051\020\053\026" +
    "\055\024\001\002\000\006\023\uffe7\034\uffe7\001\002\000" +
    "\004\010\145\001\002\000\004\011\146\001\002\000\030" +
    "\003\167\004\161\023\uff94\026\150\030\152\041\147\042" +
    "\162\043\172\044\170\053\026\056\157\001\002\000\004" +
    "\004\337\001\002\000\040\003\167\004\161\023\uff94\026" +
    "\150\030\152\033\uff94\041\147\042\162\043\172\044\170" +
    "\052\uff94\053\026\056\157\063\uff94\065\uff94\001\002\000" +
    "\004\026\333\001\002\000\004\026\331\001\002\000\004" +
    "\026\327\001\002\000\004\023\321\001\002\000\004\026" +
    "\317\001\002\000\004\026\315\001\002\000\004\016\275" +
    "\001\002\000\004\026\273\001\002\000\010\010\073\016" +
    "\260\031\261\001\002\000\006\004\202\010\177\001\002" +
    "\000\004\026\245\001\002\000\004\026\243\001\002\000" +
    "\004\026\241\001\002\000\004\026\237\001\002\000\040" +
    "\003\167\004\161\023\uff94\026\150\030\152\033\uff94\041" +
    "\147\042\162\043\172\044\170\052\uff94\053\026\056\157" +
    "\063\uff94\065\uff94\001\002\000\004\043\232\001\002\000" +
    "\004\026\230\001\002\000\006\004\202\010\177\001\002" +
    "\000\004\026\174\001\002\000\040\003\167\004\161\023" +
    "\uff94\026\150\030\152\033\uff94\041\147\042\162\043\172" +
    "\044\170\052\uff94\053\026\056\157\063\uff94\065\uff94\001" +
    "\002\000\014\023\uff97\033\uff97\052\uff97\063\uff97\065\uff97" +
    "\001\002\000\042\003\uffc3\004\uffc3\011\uffc3\023\uffc3\026" +
    "\uffc3\030\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\224\050\uffc3\053\uffc3\056\uffc3\065\uffc3\001\002\000" +
    "\006\004\202\010\177\001\002\000\040\003\uffc6\004\uffc6" +
    "\011\uffc6\023\uffc6\026\uffc6\030\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\217\050\uffc6\053\uffc6\056\uffc6\065\uffc6" +
    "\001\002\000\030\003\167\004\161\023\uff94\026\150\030" +
    "\152\041\147\042\162\043\172\044\170\053\026\056\157" +
    "\001\002\000\006\014\203\031\205\001\002\000\016\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\035\uffca\001\002" +
    "\000\016\004\110\005\057\006\211\007\210\010\044\035" +
    "\206\001\002\000\016\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\035\uffc9\001\002\000\042\003\uffce\004\uffce\011" +
    "\uffce\023\uffce\026\uffce\030\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\050\uffce\053\uffce\056\uffce\065" +
    "\uffce\001\002\000\042\003\uffcf\004\uffcf\011\uffcf\023\uffcf" +
    "\026\uffcf\030\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\050\uffcf\053\uffcf\056\uffcf\065\uffcf\001\002" +
    "\000\004\007\212\001\002\000\042\003\uffcd\004\uffcd\011" +
    "\uffcd\023\uffcd\026\uffcd\030\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\050\uffcd\053\uffcd\056\uffcd\065" +
    "\uffcd\001\002\000\042\003\uffcc\004\uffcc\011\uffcc\023\uffcc" +
    "\026\uffcc\030\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\050\uffcc\053\uffcc\056\uffcc\065\uffcc\001\002" +
    "\000\004\023\214\001\002\000\004\043\215\001\002\000" +
    "\004\026\uff8f\001\002\000\036\003\uffc8\004\uffc8\011\uffc8" +
    "\023\uffc8\026\uffc8\030\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\050\uffc8\053\uffc8\056\uffc8\065\uffc8\001\002\000\006" +
    "\004\202\010\177\001\002\000\040\003\uffc6\004\uffc6\011" +
    "\uffc6\023\uffc6\026\uffc6\030\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\217\050\uffc6\053\uffc6\056\uffc6\065\uffc6\001" +
    "\002\000\036\003\uffc7\004\uffc7\011\uffc7\023\uffc7\026\uffc7" +
    "\030\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\050\uffc7\053" +
    "\uffc7\056\uffc7\065\uffc7\001\002\000\004\011\223\001\002" +
    "\000\042\003\uffcb\004\uffcb\011\uffcb\023\uffcb\026\uffcb\030" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\050\uffcb\053\uffcb\056\uffcb\065\uffcb\001\002\000\006\004" +
    "\202\010\177\001\002\000\040\003\uffc5\004\uffc5\011\uffc5" +
    "\023\uffc5\026\uffc5\030\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\050\uffc5\053\uffc5\056\uffc5\065\uffc5\001\002" +
    "\000\042\003\uffc3\004\uffc3\011\uffc3\023\uffc3\026\uffc3\030" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\224" +
    "\050\uffc3\053\uffc3\056\uffc3\065\uffc3\001\002\000\040\003" +
    "\uffc4\004\uffc4\011\uffc4\023\uffc4\026\uffc4\030\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\050\uffc4\053\uffc4\056" +
    "\uffc4\065\uffc4\001\002\000\040\003\167\004\161\023\uff94" +
    "\026\150\030\152\033\uff94\041\147\042\162\043\172\044" +
    "\170\052\uff94\053\026\056\157\063\uff94\065\uff94\001\002" +
    "\000\014\023\uff9d\033\uff9d\052\uff9d\063\uff9d\065\uff9d\001" +
    "\002\000\006\004\202\010\177\001\002\000\030\003\167" +
    "\004\161\026\150\030\152\041\147\042\162\043\172\044" +
    "\170\053\026\056\157\065\uff94\001\002\000\004\065\235" +
    "\001\002\000\004\026\uff8e\001\002\000\014\023\uff95\033" +
    "\uff95\052\uff95\063\uff95\065\uff95\001\002\000\040\003\167" +
    "\004\161\023\uff94\026\150\030\152\033\uff94\041\147\042" +
    "\162\043\172\044\170\052\uff94\053\026\056\157\063\uff94" +
    "\065\uff94\001\002\000\014\023\uff9b\033\uff9b\052\uff9b\063" +
    "\uff9b\065\uff9b\001\002\000\040\003\167\004\161\023\uff94" +
    "\026\150\030\152\033\uff94\041\147\042\162\043\172\044" +
    "\170\052\uff94\053\026\056\157\063\uff94\065\uff94\001\002" +
    "\000\014\023\uffa0\033\uffa0\052\uffa0\063\uffa0\065\uffa0\001" +
    "\002\000\040\003\167\004\161\023\uff94\026\150\030\152" +
    "\033\uff94\041\147\042\162\043\172\044\170\052\uff94\053" +
    "\026\056\157\063\uff94\065\uff94\001\002\000\014\023\uff9f" +
    "\033\uff9f\052\uff9f\063\uff9f\065\uff9f\001\002\000\040\003" +
    "\167\004\161\023\uff94\026\150\030\152\033\uff94\041\147" +
    "\042\162\043\172\044\170\052\uff94\053\026\056\157\063" +
    "\uff94\065\uff94\001\002\000\014\023\uff99\033\uff99\052\uff99" +
    "\063\uff99\065\uff99\001\002\000\004\050\250\001\002\000" +
    "\032\003\167\004\161\023\uff94\026\150\030\152\033\uff94" +
    "\041\147\042\162\043\172\044\170\053\026\056\157\001" +
    "\002\000\006\023\253\033\252\001\002\000\030\003\167" +
    "\004\161\023\uff94\026\150\030\152\041\147\042\162\043" +
    "\172\044\170\053\026\056\157\001\002\000\004\042\254" +
    "\001\002\000\004\026\uffc2\001\002\000\004\023\256\001" +
    "\002\000\004\042\257\001\002\000\004\026\uffc1\001\002" +
    "\000\004\004\264\001\002\000\016\004\065\005\057\006" +
    "\051\010\044\035\046\056\045\001\002\000\006\026\uffaf" +
    "\057\uffaf\001\002\000\006\026\uffb1\057\uffb1\001\002\000" +
    "\006\010\265\031\266\001\002\000\020\004\065\005\057" +
    "\006\051\010\044\011\270\035\046\056\045\001\002\000" +
    "\016\004\110\005\057\006\051\010\044\035\046\056\045" +
    "\001\002\000\006\026\uffb0\057\uffb0\001\002\000\004\026" +
    "\uffac\001\002\000\004\011\272\001\002\000\004\026\uffab" +
    "\001\002\000\040\003\167\004\161\023\uff94\026\150\030" +
    "\152\033\uff94\041\147\042\162\043\172\044\170\052\uff94" +
    "\053\026\056\157\063\uff94\065\uff94\001\002\000\014\023" +
    "\uffa1\033\uffa1\052\uffa1\063\uffa1\065\uffa1\001\002\000\006" +
    "\060\276\064\117\001\002\000\004\010\277\001\002\000" +
    "\012\004\065\005\057\006\301\010\044\001\002\000\010" +
    "\011\uffa7\047\306\061\305\001\002\000\010\011\uffa8\047" +
    "\306\061\305\001\002\000\010\011\uffa5\047\306\061\305" +
    "\001\002\000\004\011\304\001\002\000\004\026\uffae\001" +
    "\002\000\012\004\uffa3\005\uffa3\006\uffa3\010\uffa3\001\002" +
    "\000\012\004\uffa4\005\uffa4\006\uffa4\010\uffa4\001\002\000" +
    "\012\004\065\005\057\006\301\010\044\001\002\000\004" +
    "\011\uffa6\001\002\000\012\004\065\005\057\006\301\010" +
    "\044\001\002\000\004\011\uffaa\001\002\000\012\004\065" +
    "\005\057\006\301\010\044\001\002\000\004\011\uffa9\001" +
    "\002\000\040\003\167\004\161\023\uff94\026\150\030\152" +
    "\033\uff94\041\147\042\162\043\172\044\170\052\uff94\053" +
    "\026\056\157\063\uff94\065\uff94\001\002\000\014\023\uffa2" +
    "\033\uffa2\052\uffa2\063\uffa2\065\uffa2\001\002\000\040\003" +
    "\167\004\161\023\uff94\026\150\030\152\033\uff94\041\147" +
    "\042\162\043\172\044\170\052\uff94\053\026\056\157\063" +
    "\uff94\065\uff94\001\002\000\014\023\uff9a\033\uff9a\052\uff9a" +
    "\063\uff9a\065\uff9a\001\002\000\004\036\322\001\002\000" +
    "\020\003\027\023\uffe1\026\025\036\017\051\020\053\026" +
    "\055\024\001\002\000\004\023\324\001\002\000\004\037" +
    "\326\001\002\000\006\002\000\026\000\001\002\000\006" +
    "\002\uff8d\026\uff8d\001\002\000\040\003\167\004\161\023" +
    "\uff94\026\150\030\152\033\uff94\041\147\042\162\043\172" +
    "\044\170\052\uff94\053\026\056\157\063\uff94\065\uff94\001" +
    "\002\000\014\023\uff9c\033\uff9c\052\uff9c\063\uff9c\065\uff9c" +
    "\001\002\000\040\003\167\004\161\023\uff94\026\150\030" +
    "\152\033\uff94\041\147\042\162\043\172\044\170\052\uff94" +
    "\053\026\056\157\063\uff94\065\uff94\001\002\000\014\023" +
    "\uff98\033\uff98\052\uff98\063\uff98\065\uff98\001\002\000\040" +
    "\003\167\004\161\023\uff94\026\150\030\152\033\uff94\041" +
    "\147\042\162\043\172\044\170\052\uff94\053\026\056\157" +
    "\063\uff94\065\uff94\001\002\000\014\023\uff9e\033\uff9e\052" +
    "\uff9e\063\uff9e\065\uff9e\001\002\000\014\023\uff96\033\uff96" +
    "\052\uff96\063\uff96\065\uff96\001\002\000\004\057\342\001" +
    "\002\000\006\016\340\031\261\001\002\000\004\004\341" +
    "\001\002\000\004\031\266\001\002\000\006\004\344\005" +
    "\343\001\002\000\030\003\167\004\161\026\150\030\152" +
    "\041\147\042\162\043\172\044\170\053\026\056\157\063" +
    "\uff94\001\002\000\030\003\167\004\161\026\150\030\152" +
    "\041\147\042\162\043\172\044\170\053\026\056\157\063" +
    "\uff94\001\002\000\004\063\346\001\002\000\004\026\uff90" +
    "\001\002\000\004\063\350\001\002\000\004\026\uff91\001" +
    "\002\000\022\003\027\023\uffe1\026\025\034\uffe1\036\017" +
    "\051\020\053\026\055\024\001\002\000\006\023\uffe6\034" +
    "\uffe6\001\002\000\004\010\354\001\002\000\006\004\357" +
    "\011\356\001\002\000\004\011\372\001\002\000\032\003" +
    "\167\004\161\023\uff94\026\150\030\152\041\147\042\162" +
    "\043\172\044\170\053\026\054\040\056\157\001\002\000" +
    "\004\054\040\001\002\000\006\011\ufff1\061\361\001\002" +
    "\000\004\004\357\001\002\000\004\011\ufff2\001\002\000" +
    "\004\023\370\001\002\000\030\003\167\004\161\023\uff94" +
    "\026\150\030\152\041\147\042\162\043\172\044\170\053" +
    "\026\056\157\001\002\000\004\023\366\001\002\000\004" +
    "\051\367\001\002\000\004\026\uffd1\001\002\000\004\051" +
    "\371\001\002\000\004\026\uffd0\001\002\000\032\003\167" +
    "\004\161\023\uff94\026\150\030\152\041\147\042\162\043" +
    "\172\044\170\053\026\054\040\056\157\001\002\000\004" +
    "\023\u010c\001\002\000\030\003\167\004\161\026\150\030" +
    "\152\041\147\042\162\043\172\044\170\052\uff94\053\026" +
    "\056\157\001\002\000\004\052\377\001\002\000\004\026" +
    "\012\001\002\000\012\004\u0102\005\u0100\006\u0104\035\u0101" +
    "\001\002\000\004\026\uffd9\001\002\000\004\026\uffd7\001" +
    "\002\000\006\010\u0105\026\uffd8\001\002\000\004\026\uffd4" +
    "\001\002\000\004\026\uffd6\001\002\000\020\004\u0106\005" +
    "\057\006\051\010\044\011\074\035\046\056\045\001\002" +
    "\000\020\010\073\011\uffb9\016\061\024\uffb9\025\uffb9\054" +
    "\040\061\uffb9\001\002\000\004\011\u0108\001\002\000\004" +
    "\026\uffd5\001\002\000\004\023\u010a\001\002\000\004\051" +
    "\u010b\001\002\000\004\026\uffd3\001\002\000\004\051\u010d" +
    "\001\002\000\004\026\uffd2\001\002\000\004\010\u011a\001" +
    "\002\000\004\010\u0110\001\002\000\006\004\357\011\u0112" +
    "\001\002\000\004\011\u0116\001\002\000\030\003\167\004" +
    "\161\023\uff94\026\150\030\152\041\147\042\162\043\172" +
    "\044\170\053\026\056\157\001\002\000\004\023\u0114\001" +
    "\002\000\004\036\u0115\001\002\000\004\026\uffdc\001\002" +
    "\000\030\003\167\004\161\023\uff94\026\150\030\152\041" +
    "\147\042\162\043\172\044\170\053\026\056\157\001\002" +
    "\000\004\023\u0118\001\002\000\004\036\u0119\001\002\000" +
    "\004\026\uffdd\001\002\000\006\004\357\011\u011c\001\002" +
    "\000\004\011\u0120\001\002\000\030\003\167\004\161\023" +
    "\uff94\026\150\030\152\041\147\042\162\043\172\044\170" +
    "\053\026\056\157\001\002\000\004\023\u011e\001\002\000" +
    "\004\036\u011f\001\002\000\004\026\uffdb\001\002\000\030" +
    "\003\167\004\161\023\uff94\026\150\030\152\041\147\042" +
    "\162\043\172\044\170\053\026\056\157\001\002\000\004" +
    "\023\u0122\001\002\000\004\036\u0123\001\002\000\004\026" +
    "\uffda\001\002\000\022\003\027\023\uffe1\026\025\034\uffe1" +
    "\036\017\051\020\053\026\055\024\001\002\000\006\023" +
    "\uffe4\034\uffe4\001\002\000\004\002\uff8a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\006\002\006\037\007\001\001\000\002\001" +
    "\001\000\006\002\006\037\u0125\001\001\000\002\001\001" +
    "\000\004\040\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\022\006\015\010\027\025\020\055" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\022\006\015\010\027" +
    "\025\020\055\127\001\001\000\004\014\033\001\001\000" +
    "\014\004\022\006\015\010\027\025\020\055\032\001\001" +
    "\000\002\001\001\000\014\004\022\006\015\010\027\025" +
    "\020\055\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\040\001\001\000\002\001\001\000\004\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\041\001\001\000\002\001\001\000\014\016\051\034" +
    "\055\052\047\054\046\062\052\001\001\000\010\016\051" +
    "\052\047\054\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\111\001\001\000\002" +
    "\001\001\000\004\053\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\051\033\066\034\065\045\063\052" +
    "\047\054\046\062\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\051\033\071\034\065\045\063\052\047\054" +
    "\046\062\052\001\001\000\002\001\001\000\020\016\051" +
    "\033\074\034\065\045\063\052\047\054\046\062\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\051\033\077\034\065\045\063\052\047\054" +
    "\046\062\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\051\033\102\034\065\045\063\052\047\054" +
    "\046\062\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\106\001\001\000\004\053" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\051\052\113\001\001\000\004\051" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\131\050\133\001\001\000\002\001\001\000\006" +
    "\004\131\050\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\131" +
    "\050\140\001\001\000\002\001\001\000\014\004\022\006" +
    "\015\010\027\025\020\055\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\155\005" +
    "\170\011\152\012\165\015\164\020\153\026\163\031\150" +
    "\036\162\045\172\060\157\062\154\001\001\000\004\015" +
    "\335\001\001\000\032\004\155\005\170\011\152\012\165" +
    "\015\164\020\334\026\163\031\150\036\162\045\172\060" +
    "\157\062\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\177\030\246\041\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\004\155\005\170\011\152\012\165\015" +
    "\164\020\235\026\163\031\150\036\162\045\172\060\157" +
    "\062\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\177\030\200\041\175\001\001\000\002\001\001" +
    "\000\032\004\155\005\170\011\152\012\165\015\164\020" +
    "\174\026\163\031\150\036\162\045\172\060\157\062\154" +
    "\001\001\000\002\001\001\000\004\042\224\001\001\000" +
    "\010\027\177\030\221\041\175\001\001\000\004\043\215" +
    "\001\001\000\032\004\155\005\170\011\152\012\165\015" +
    "\164\020\212\026\163\031\150\036\162\045\172\060\157" +
    "\062\154\001\001\000\004\044\203\001\001\000\002\001" +
    "\001\000\004\016\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\217\041" +
    "\175\001\001\000\004\043\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\225\001" +
    "\001\000\002\001\001\000\004\042\226\001\001\000\002" +
    "\001\001\000\032\004\155\005\170\011\152\012\165\015" +
    "\164\020\230\026\163\031\150\036\162\045\172\060\157" +
    "\062\154\001\001\000\002\001\001\000\010\027\177\030" +
    "\232\041\175\001\001\000\032\004\155\005\170\011\152" +
    "\012\165\015\164\020\233\026\163\031\150\036\162\045" +
    "\172\060\157\062\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\155\005\170\011" +
    "\152\012\165\015\164\020\237\026\163\031\150\036\162" +
    "\045\172\060\157\062\154\001\001\000\002\001\001\000" +
    "\032\004\155\005\170\011\152\012\165\015\164\020\241" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\002\001\001\000\032\004\155\005\170\011\152" +
    "\012\165\015\164\020\243\026\163\031\150\036\162\045" +
    "\172\060\157\062\154\001\001\000\002\001\001\000\032" +
    "\004\155\005\170\011\152\012\165\015\164\020\245\026" +
    "\163\031\150\036\162\045\172\060\157\062\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\155\005" +
    "\170\011\152\012\165\015\164\020\250\026\163\031\150" +
    "\036\162\045\172\060\157\062\154\001\001\000\002\001" +
    "\001\000\032\004\155\005\170\011\152\012\165\015\164" +
    "\020\254\026\163\031\150\036\162\045\172\060\157\062" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\051\034\262\045\261\052\047\054\046" +
    "\062\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\051\033\270\034\065\045\063" +
    "\052\047\054\046\062\052\001\001\000\014\016\051\034" +
    "\266\052\047\054\046\062\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\155\005\170\011\152\012\165\015\164\020\273" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\051\045\301\052\047\054\277\061\302\001" +
    "\001\000\004\056\312\001\001\000\004\056\310\001\001" +
    "\000\004\056\306\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\051" +
    "\045\301\052\047\054\277\061\307\001\001\000\002\001" +
    "\001\000\014\016\051\045\301\052\047\054\277\061\311" +
    "\001\001\000\002\001\001\000\014\016\051\045\301\052" +
    "\047\054\277\061\313\001\001\000\002\001\001\000\032" +
    "\004\155\005\170\011\152\012\165\015\164\020\315\026" +
    "\163\031\150\036\162\045\172\060\157\062\154\001\001" +
    "\000\002\001\001\000\032\004\155\005\170\011\152\012" +
    "\165\015\164\020\317\026\163\031\150\036\162\045\172" +
    "\060\157\062\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\022\006\015\010\027\025\020\055\322" +
    "\001\001\000\004\017\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\155\005\170" +
    "\011\152\012\165\015\164\020\327\026\163\031\150\036" +
    "\162\045\172\060\157\062\154\001\001\000\002\001\001" +
    "\000\032\004\155\005\170\011\152\012\165\015\164\020" +
    "\331\026\163\031\150\036\162\045\172\060\157\062\154" +
    "\001\001\000\002\001\001\000\032\004\155\005\170\011" +
    "\152\012\165\015\164\020\333\026\163\031\150\036\162" +
    "\045\172\060\157\062\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\004" +
    "\155\005\170\011\152\012\165\015\164\020\346\026\163" +
    "\031\150\036\162\045\172\060\157\062\154\001\001\000" +
    "\032\004\155\005\170\011\152\012\165\015\164\020\344" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\022\006\015\010\027\025" +
    "\020\055\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\354\001\001\000\002\001\001\000\034\004" +
    "\155\005\170\011\152\012\165\015\164\020\362\024\363" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\004\024\357\001\001\000\002\001\001\000\004" +
    "\023\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\155\005\170\011\152\012\165\015\164\020\364" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\155\005" +
    "\170\011\152\012\165\015\164\020\372\024\373\026\163" +
    "\031\150\036\162\045\172\060\157\062\154\001\001\000" +
    "\002\001\001\000\032\004\155\005\170\011\152\012\165" +
    "\015\164\020\374\026\163\031\150\036\162\045\172\060" +
    "\157\062\154\001\001\000\004\007\375\001\001\000\004" +
    "\040\u0108\001\001\000\004\045\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\051\023\u0106\033\074\034" +
    "\065\045\063\052\047\054\046\062\052\001\001\000\004" +
    "\024\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0110\001\001\000\002\001\001\000\032" +
    "\004\155\005\170\011\152\012\165\015\164\020\u0112\026" +
    "\163\031\150\036\162\045\172\060\157\062\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\155\005\170\011\152\012\165\015\164\020\u0116" +
    "\026\163\031\150\036\162\045\172\060\157\062\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u011a\001\001\000\002\001\001\000\032\004" +
    "\155\005\170\011\152\012\165\015\164\020\u011c\026\163" +
    "\031\150\036\162\045\172\060\157\062\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\155\005\170\011\152\012\165\015\164\020\u0120\026" +
    "\163\031\150\036\162\045\172\060\157\062\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\022\006\015\010\027\025\020\055\u0124\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArbolSemantico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArbolSemantico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArbolSemantico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String resultado="";
	//public Fila tipo;
        public Tabla tabla = new Tabla();
        public String cadena="";
        public String cadena2="";
        public String cadena3="";
	public int contador = 1;
        public String Ambito = "P";
        public int ambito=0;
        

 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

 public void semantic_error(String valor) throws java.lang.Exception {
        Ventana.notificar_er("Error de tipo, el error de tipo , es el error de tipo: "+ valor );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArbolSemantico$actions {




  private final ArbolSemantico parser;

  /** Constructor */
  CUP$ArbolSemantico$actions(ArbolSemantico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArbolSemantico$do_action_part00000000(
    int                        CUP$ArbolSemantico$act_num,
    java_cup.runtime.lr_parser CUP$ArbolSemantico$parser,
    java.util.Stack            CUP$ArbolSemantico$stack,
    int                        CUP$ArbolSemantico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArbolSemantico$result;

      /* select the action based on the action number */
      switch (CUP$ArbolSemantico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		RESULT = start_val;
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArbolSemantico$parser.done_parsing();
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SentenciaModulo Identificador CUERPO_ESTRUCTURA Main parentesisE parentesisC CUERPO End Sub CUERPO_ESTRUCTURA FINAL 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VARIABLES ::= Identificador coma VARIABLES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VARIABLES ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
             RESULT = n1;
    
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPODATO ::= AS Integer 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPODATO ::= AS Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= AS String 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= AS Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                

             
          
             RESULT = n2; 

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Dim VARIABLES TIPODATO IGUALDAD 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
      
   
int cont=0;
          for (int i =0; i < tabla.getListaSimbolo().size();i++){
    if(n2.toString().equals(tabla.getListaSimbolo().get(i).getNombreVar())){
cont++;


}


}
    if(n4 != null){
  
    if(cont==0){
     if((n3.toString()).equals(n4.toString())){
        //Fila Fila1 = new Fila(n3.toString() , n2.toString());
        //tabla.getListaSimbolo().add(Fila1);

    }else {

        semantic_error("La variable no se le asignan los parametros correctos"  + "| Linea: " + n2right + " Columna: " + n2left);
    }
}


 
    }

            String xd = "";
            xd = "(" + n2.toString()  + " x " + n3.toString() + ")";

                


RESULT = xd;





              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALDAD ::= Igual New Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra"  + "| Linea: " + n3right + " Columna: " + n3left );
            }
  
                  
                RESULT = retor;
}
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALDAD ::= Igual Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

             
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra"  + "| Linea: " + n3right + " Columna: " + n3left );
            }
  
                  

                RESULT = retor;
}
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUALDAD ::= Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
               
              String revisar = tabla.BuscarTipoN(n2.toString());
             
             if(!revisar.equals("error_tipo")){
                cadena = revisar;
            }else {
                 semantic_error("Error tipo la variable " + n2.toString() + " no se encuentra"  + "| Linea: " + n2right + " Columna: " + n2left );
            }
          
             
             RESULT = cadena;

             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUALDAD ::= Igual Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		

               
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

            
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n3.toString());
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }
            }
  
                

                RESULT = retor;
            
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IGUALDAD ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= Identificador TIPODATO coma PARAMETROS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                

                    
                if ((n4 != null) && (n2 != null)) {
                cadena = n4.toString()+ "x" + n2.toString() ;
            
                   //tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             
             RESULT = cadena;

             }
             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= Identificador TIPODATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

               //tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             if (n2 != null){
             RESULT = n2;}
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATO ::= Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
              
                 
             RESULT = "Boolean";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATO ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             if (n1 != null)
             RESULT = n1;
              
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATO ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           
             RESULT = "String";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATO ::= LEER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS2 ::= DATO coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           // String revisar = tabla.BuscarTipoN(n1.toString());
            
             if(!(n1.toString()).equals("error_tipo")){
             
              cadena =  n3.toString() +  "x"  +  n1.toString();
               
            } else {
                
                 semantic_error("Error tipo la variable sip aqui tamos xD " + n1.toString() + "no se encuentra"  + "| Linea: " + n2right + " Columna: " + n2left );
            
            }
               
         
             
             RESULT = cadena;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS2 ::= DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String cad = "";
            //String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cad = n1.toString();
            } else {
                  
                 semantic_error("Error tipo la variable y aqui me presento " + n1.toString() + "no se encuentra"  + "| Linea: " + n1right + " Columna: " + n1left);
            }
          
             
             RESULT = cad;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS2 ::= RECURSION coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           // String revisar = tabla.BuscarTipoN(n1.toString());
            
             if(!(n1.toString()).equals("error_tipo")){
             
              cadena =  n3.toString() +  "x"  +  n1.toString();
               
            } else {
                
                 semantic_error("Error tipo la variable sip aqui tamos xD " + n1.toString() + "no se encuentra"  + "| Linea: " + n2right + " Columna: " + n2left );
            
            }
               
         
             
             RESULT = cadena;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS2 ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String cad = "";
            //String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cad = n1.toString();
            } else {
                  
                 semantic_error("Error tipo la variable y aqui me presento " + n1.toString() + "no se encuentra"  + "| Linea: " + n1right + " Columna: " + n1left);
            }
          
             
             RESULT = cad;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESTRUCTURA ::= struct Identificador PARA_STRUCK End struct 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

            Record registro = new Record();
        
        if (!(cadena2.equals(""))){
            

            cadena3 = "Record(" + cadena2 + ")";
        

        //Fila Fila1 = new Fila(cadena3 , n2.toString());
        //tabla.getListaSimbolo().add(Fila1);
                
        registro = new Record (cadena3);
        
        registro.obtenerVariables();

     
        //registro.impresion();
       // tabla.getListaSimbolo().add(new Fila(registro,n2.toString()));
        cadena2 = "";
           
             }else{
              
             //Fila Fila1 = new Fila("void" , n2.toString());
            //tabla.getListaSimbolo().add(Fila1);
            

                }
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_ESTRUCTURA ::= DECLARACION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
     
      
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_ESTRUCTURA ::= ESTRUCTURA Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
          
           
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_ESTRUCTURA ::= FUNCION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
           
          
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_ESTRUCTURA ::= PARA_SUB Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		
           
            
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_ESTRUCTURA ::= Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
      


        
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_ESTRUCTURA ::= error CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_ESTRUCTURA ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARA_STRUCK ::= DECLARACION Enter PARA_STRUCK 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

            

                String variableOP = n2.toString();
             
           
              
            if (n3 != null){
             
            cadena2 =  n2.toString()+ " x " + n3.toString() ;
           
                RESULT = cadena2;
            }else{

                    
                    cadena2 =  n2.toString() + cadena2 ;
                  
                    RESULT = cadena2;
                }


                
            


              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARA_STRUCK ::= Enter PARA_STRUCK 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARA_STRUCK ::= 
            {
              Object RESULT =null;
		




    
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARA_SUB ::= Sub Identificador parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             //Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
            // tabla.getListaSimbolo().add(Fila1);
             
             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARA_SUB ::= Sub Identificador parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            //Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             //tabla.getListaSimbolo().add(Fila1);
         
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARA_SUB ::= Sub New parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            //Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             //tabla.getListaSimbolo().add(Fila1);
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARA_SUB ::= Sub New parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            //Fila Fila1 = new Fila(new Funcion(n4.toString(), "void") , n2.toString());
            //tabla.getListaSimbolo().add(Fila1);
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNO ::= Return Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             
           RESULT = "Integer";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETORNO ::= Return Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            String revisar = tabla.BuscarTipoN(n2.toString());
            
             RESULT = revisar;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETORNO ::= Return Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             
             RESULT = "Boolean";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETORNO ::= Return Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
             
           RESULT = "String";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETORNO ::= Return Identificador parentesisE PARAMETROS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
     
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETORNO ::= Return RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            
  
           
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC TIPODATO CUERPO RETORNO DESPUES End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-9)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n10 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n9 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             //Fila Fila1 = new Fila(new Funcion(n4.toString(),n6.toString()) , n2.toString());
            // tabla.getListaSimbolo().add(Fila1);

            if(!((n6.toString()).equals(n10.toString()))){
                 semantic_error("El retorno de la funcion: "+  n2.toString() + " no es del mismo tipo que la funcion"  + "| Linea: " + n2right + " Columna: " + n2left);

             }
            
             

               
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

           // Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
             //tabla.getListaSimbolo().add(Fila1);
             
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FUNCION ::= Function Identificador parentesisE parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

             //Fila Fila1 = new Fila(new Funcion("void", n5.toString() ) , n2.toString());
             //tabla.getListaSimbolo().add(Fila1);
          
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= Function Identificador parentesisE parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             //Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             //tabla.getListaSimbolo().add(Fila1);
            
          
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION VALORES_NUMERICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
         
            String variable1 = tabla.BuscarTipoN(n1.toString());
            
            String variable2 = n3.toString();
          
            if ((!variable1.equals("error_tipo")) && (!variable2.equals("error_tipo"))){
                if ((!variable1.equals(variable2))){
                    bandera = "invalida";
                    semantic_error("Las variables no son del mismo tipo"  + "| Linea: " + n2right + " Columna: " + n2left);
                    
            } else{
                    bandera = "valida" ;
                } 
            }else{
                semantic_error("Error tipo en el if con las variables " + n1.toString() + " o con "  + n3.toString()  + "| Linea: " + n2right + " Columna: " + n2left);

                }
            
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());
       
            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("Boolean"))){
                    semantic_error("la variable" + n1.toString() + "no es un boolean"  + "| Linea: " + n2right + " Columna: " + n2left);
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString()  + "| Linea: " + n2right + " Columna: " + n2left);
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena"  + "| Linea: " + n2right + " Columna: " + n2left);
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString()  + "| Linea: " + n2right + " Columna: " + n2left);
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Comilla Comilla 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
             String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena"  + "| Linea: " + n2right + " Columna: " + n2left);
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString()  + "| Linea: " + n2right + " Columna: " + n2left);
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= parentesisE DECLARACION_IF parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
             //RESULT = nd; 
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMPARACION ::= OperadorRelacional 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
      
             
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMPARACION ::= Igual 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_IF ::= LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		
         
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOGICOOR ::= OR LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		

             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOGICOOR ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LOGICOAND ::= SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		
           
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND",21, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOGICOAND_Prima ::= And SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOGICOAND_Prima ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_IF ::= IF DECLARACION_IF then CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",20, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELSE_IF ::= IF DECLARACION_IF then CUERPO Else CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARITMETICOS ::= MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                if(n2 != null){
                    if(!(n1.toString()).equals("Integer")){
                              if((!(n1.toString()).equals("Boolean"))){
                semantic_error("la variable " + n1.toString() + " no es un Boolean"  + "| Linea: " + n2right + " Columna: " + n2left);
                    RESULT = "error_tipo";
                }else{
                    RESULT = "Boolean";
                }
                        semantic_error("error de tipo , revise la multiplicacion"  + "| Linea: " + n2right + " Columna: " + n2left );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                     
                }else {
                        
                        RESULT = n1 ;
                    }
                
          
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ARITMETICOS",42, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ADICIONES ::= OPRestSuma MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            
           

            
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } }else {
                   // semantic_error("error de tipo en la adicion");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros"  + "| Linea: " + n2right + " Columna: " + n2left);
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } 
            }else {
                    semantic_error("error de tipo en la adicion"  + "| Linea: " + n2right + " Columna: " + n2left);
                    RESULT = "error_tipo";

                    }
 
                }

             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ADICIONES",39, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ADICIONES ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ADICIONES",39, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MULTIPLICACIONES ::= VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
               
                 if(n1 != null){
                    if(!(n1.toString()).equals("Integer")){
                            
                        semantic_error("error de tipo , revise la multiplicacion"  + "| Linea: " + n2right + " Columna: " + n2left );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                        
                     
                }else {
                        
                        RESULT = n2.toString() ;
                    }
            
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES",40, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MULTIPLICACIONES_PRIMA ::= OPMultDiv VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable " + n2.toString() + " no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
            
             }else {
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros"  + "| Linea: " + n2right + " Columna: " + n2left);
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
           
                 }else {
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros"  + "| Linea: " + n2right + " Columna: " + n2left);
                    RESULT = "error_tipo";

                    }
 
                }
           
             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",41, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MULTIPLICACIONES_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",41, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALORES_NUMERICOS ::= Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = "Integer";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALORES_NUMERICOS ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                        String variable1 = "";

           if (((n1.toString()).toLowerCase()).equals("True".toLowerCase()) || ((n1.toString()).toLowerCase()).equals("False".toLowerCase())){
             
            variable1 = "Boolean";
            }else{
            String bandera = "";
            variable1 = tabla.BuscarTipoN(n1.toString());

            }
          
          RESULT = variable1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES_NUMERICOS ::= parentesisE ARITMETICOS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                
                if (!((n2.toString()).equals("Integer"))){
                        RESULT = "error_tipo";
                    
                    }else{
                        RESULT = "Integer";

                    }
                
    
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES_NUMERICOS ::= Identificador Punto Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                    
             String value = "";
            String revisar =  tabla.BuscarTipoN(n1.toString());
                    
                     
                    if( !(revisar.equals("error_tipo"))   ){

                        Record registro = tabla.esRecord(revisar);
                        
                        if (registro != null ){
                        

                        
                        String tipoReg = registro.buscarVariable(n3.toString());

  
                        if(tipoReg.equals("error_tipo")){
                                 semantic_error("La variable " + n3.toString() + " no esta declarada en el registro"  + "| Linea: " + n2right + " Columna: " + n2left );
                            }else{
                                System.out.println("KAKAKAKAKAKAKAK: " + tipoReg);
                                    value = tipoReg;
                                    RESULT = tipoReg;
                                }

                        }else{
                                semantic_error("la variable " + n1.toString() + " es un record "  + "| Linea: " + n2right + " Columna: " + n2left );
                        
                                }

                    }else{
                        semantic_error("La variable " + n1.toString() + " no es un record"  + "| Linea: " + n2right + " Columna: " + n2left);



                        }

           

                        RESULT = value;
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RECURSIVIDAD ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
       
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_RECURSIVIDAD ::= RECURSION OPRestSuma ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
       
     
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_RECURSIVIDAD ::= RECURSION OPMultDiv ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
            
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_RECURSIVIDAD ::= ARITMETICOS OPRestSuma RECURSION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_RECURSIVIDAD ::= ARITMETICOS OPMultDiv RECURSION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ASIGNACION ::= Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		 
                
               
                String revisar = tabla.BuscarTipoN(n1.toString()) ;
                String revisar2 = tabla.BuscarTipoN(n3.toString()) ;
                    
               
                

                if(!((revisar).equals(n3.toString()))){
                     
                    semantic_error("La variable " + n1.toString() + " fue asignada a una de distinto tipo "  + "| Linea: " + n2right + " Columna: " + n2left);
                
                }

         
        
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNACION ::= Identificador Punto Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		


                    String revisar =  tabla.BuscarTipoN(n1.toString());
                    
                     
                    if( !(revisar.equals("error_tipo"))   ){

                        Record registro = tabla.esRecord(revisar);
                        
                        if (registro != null ){
                        

                        
                        String tipoReg = registro.buscarVariable(n3.toString());

  
                        if(tipoReg.equals("error_tipo")){
                                 semantic_error("La variable " + n3.toString() + " no esta declarada en el registro"  + "| Linea: " + n2right + " Columna: " + n2left );
                            }else{
                                if(  !(tipoReg.equals(n5.toString())) ){
                                             semantic_error("La variable " + n3.toString() + " no es del mismo tipo al que se le intenta asignar"  + "| Linea: " + n2right + " Columna: " + n2left );

                                        }


                                }

                        }else{
                                semantic_error("la variable " + n1.toString() + " es un record "  + "| Linea: " + n2right + " Columna: " + n2left );
                        
                                }

                    }else{
                        semantic_error("La variable " + n1.toString() + " no es un record"  + "| Linea: " + n2right + " Columna: " + n2left);



                        }

          
         
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNACION ::= Identificador Igual RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                
      String revisar = tabla.BuscarTipoN(n1.toString());
    if (!((revisar).equals("error_tipo"))){
     if(!((revisar).equals(n3.toString()))){

        semantic_error("La variable no es del mismo tipo que el asignado "  + "| Linea: " + n2right + " Columna: " + n2left);
    }

}else{
            semantic_error("la variable " + n1 + " no existe "  + "| Linea: " + n2right + " Columna: " + n2left);

     }


                
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPRIMIR ::= Console Punto WriteLine parentesisE CONCATENACION parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
       
      
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",46, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LEER ::= Console Punto ReadLine parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
              RESULT = "Integer";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LEER",48, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
     
         
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
       
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONCATENACION ::= Cadena CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
       
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONCATENACION ::= ARITMETICOS CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

               
                  if (!(Character.isDigit(((n1.toString()).charAt(0))))){
                        String revision = tabla.BuscarTipoN(n1.toString());
                      
                        if (revision.equals("error_tipo")){

                             semantic_error("la variable " + n1.toString() + " no existe "  + "| Linea: " + n1right + " Columna: " + n1left);
                            }

                    
                }
                  
                  
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          

          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONCATENACION ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          

             if((n1.toString()).equals("error_tipo")){

                    semantic_error("la variable no existe"  + "| Linea: " + n1right + " Columna: " + n1left);

                    }       
        
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONCATENACION ::= RECURSION CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONCATENACION ::= RECURSION 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONCATENABLES ::= concatenacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",44, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONCATENABLES ::= coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",44, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO ::= DECLARACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO ::= IMPRIMIR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO ::= ASIGNACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO ::= SENTENCIA_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO ::= ELSE_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO ::= DECLARACION_FOR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO ::= WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
        
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO ::= DO_WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO ::= LEER Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
     
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO ::= LLAMADA_FUNCION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= Comentario Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO ::= RECURSION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPO ::= Enter CUERPO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
    
           
            //RESULT = n2;

           
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CUERPO ::= error CUERPO 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RECURSION ::= Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                
               if (n3 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

           
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n1.toString());
                if((n3.toString()).contains(TipoF.getArgumentos())){

                    retor = TipoF.getRetorno();


                }else{
                semantic_error("Error tipo la variable   " + n1.toString() + "   no tiene esos tipos de parametros"  + "| Linea: " + n2right + " Columna: " + n2left );
            }
            }else {
                 semantic_error("Error tipo la variable   " + n1.toString() + "   no se encuentra"   + "| Linea: " + n2right + " Columna: " + n2left);
            }
                  

                RESULT = retor;
                }
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // RECURSION ::= Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		


                Funcion  TipoF  = new Funcion();
          String retor = "";
        
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

              
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n1.toString());
       
              
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }else {
                        retor = "error_tipo";
                        semantic_error("Error tipo, la funcion "+ n1.toString()+" si tiene parametros"   + "| Linea: " + n2right + " Columna: " + n2left );
                    }

            }
            
            RESULT = retor;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION_FOR ::= For ASIGNACION TO Numero CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            
                 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION_FOR ::= For ASIGNACION TO Identificador CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                            String revisar = tabla.BuscarTipoN(n4.toString()); 

                            if(!(revisar.equals("Integer"))){
                                semantic_error("error de tipo , con el id de for"  + "| Linea: " + n2right + " Columna: " + n2left);
                            }
                    
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WHILE ::= While DECLARACION_IF CUERPO End While 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DO_WHILE ::= Do While DECLARACION_IF CUERPO Loop 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
              
        
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FINAL ::= End SentenciaModulo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		



      
       
         




              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FINAL",13, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DESPUES ::= Enter DESPUES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DESPUES ::= Enter 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PROGRAMA ::= Enter PROGRAMA 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PROGRAMA ::= INICIO DESPUES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArbolSemantico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArbolSemantico$do_action(
    int                        CUP$ArbolSemantico$act_num,
    java_cup.runtime.lr_parser CUP$ArbolSemantico$parser,
    java.util.Stack            CUP$ArbolSemantico$stack,
    int                        CUP$ArbolSemantico$top)
    throws java.lang.Exception
    {
              return CUP$ArbolSemantico$do_action_part00000000(
                               CUP$ArbolSemantico$act_num,
                               CUP$ArbolSemantico$parser,
                               CUP$ArbolSemantico$stack,
                               CUP$ArbolSemantico$top);
    }
}

}
