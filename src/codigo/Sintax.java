
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import codigo.Ventana;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\015\000\002\002" +
    "\003\000\002\014\005\000\002\014\003\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\024\004\000\002\004\006\000\002\035\010\000\002" +
    "\035\004\000\002\035\006\000\002\035\002\000\002\023" +
    "\006\000\002\023\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\033\005\000" +
    "\002\033\003\000\002\025\007\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\004\000\002\053\004\000\002\053\002\000\002\006\012" +
    "\000\002\006\011\000\002\006\011\000\002\006\012\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\007\000\002\007\004\000\002\010" +
    "\013\000\002\010\012\000\002\010\012\000\002\010\011" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\006\000\002\043\003\000\002" +
    "\043\003\000\002\030\004\000\002\030\005\000\002\042" +
    "\005\000\002\042\002\000\002\027\004\000\002\041\005" +
    "\000\002\041\002\000\002\026\010\000\002\031\012\000" +
    "\002\052\004\000\002\047\005\000\002\047\002\000\002" +
    "\050\004\000\002\051\005\000\002\051\002\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\045\003" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\015\005\000\002\015\007\000\002" +
    "\015\005\000\002\056\010\000\002\060\007\000\002\036" +
    "\007\000\002\036\010\000\002\057\005\000\002\057\005" +
    "\000\002\057\007\000\002\057\003\000\002\057\003\000" +
    "\002\057\005\000\002\054\003\000\002\054\003\000\002" +
    "\054\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\002\000\002\022\004\000\002\022\002\000\002\044\006" +
    "\000\002\044\005\000\002\005\010\000\002\011\007\000" +
    "\002\012\007\000\002\017\004\000\002\037\004\000\002" +
    "\037\003\000\002\055\004\000\002\055\003\000\002\055" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\010\003\004\026\006\037\005\001\002\000" +
    "\006\002\uffff\026\uffff\001\002\000\004\004\016\001\002" +
    "\000\010\003\004\026\006\037\005\001\002\000\006\002" +
    "\uff8b\026\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\002\uff8d\026\012\001\002\000" +
    "\004\002\uff8a\001\002\000\004\002\uff8e\001\002\000\004" +
    "\002\uff8c\001\002\000\020\003\030\026\026\034\uffe3\036" +
    "\020\051\021\053\027\055\025\001\002\000\004\026\u011b" +
    "\001\002\000\006\004\u0106\066\u0105\001\002\000\004\004" +
    "\362\001\002\000\004\026\360\001\002\000\004\026\356" +
    "\001\002\000\004\034\122\001\002\000\004\004\116\001" +
    "\002\000\022\003\030\023\uffe3\026\026\034\uffe3\036\020" +
    "\051\021\053\027\055\025\001\002\000\004\004\035\001" +
    "\002\000\022\003\030\023\uffe3\026\026\034\uffe3\036\020" +
    "\051\021\053\027\055\025\001\002\000\004\026\032\001" +
    "\002\000\022\003\030\023\uffe3\026\026\034\uffe3\036\020" +
    "\051\021\053\027\055\025\001\002\000\006\023\uffe7\034" +
    "\uffe7\001\002\000\006\023\uffe4\034\uffe4\001\002\000\006" +
    "\054\ufffd\061\113\001\002\000\004\054\037\001\002\000" +
    "\014\004\111\012\106\013\110\015\112\062\107\001\002" +
    "\000\006\026\ufff3\031\042\001\002\000\004\026\ufff7\001" +
    "\002\000\020\004\054\005\056\006\050\010\043\035\044" +
    "\056\045\066\053\001\002\000\010\004\054\005\056\010" +
    "\043\001\002\000\012\011\uffef\026\uffef\057\uffef\061\uffef" +
    "\001\002\000\004\016\100\001\002\000\012\011\ufff0\026" +
    "\ufff0\057\ufff0\061\ufff0\001\002\000\016\011\uffc2\024\075" +
    "\026\uffc2\047\uffc2\057\uffc2\061\uffc2\001\002\000\012\011" +
    "\uffee\026\uffee\057\uffee\061\uffee\001\002\000\020\011\uffbf" +
    "\024\uffbf\025\071\026\uffbf\047\uffbf\057\uffbf\061\uffbf\001" +
    "\002\000\012\011\uffed\026\uffed\057\uffed\061\uffed\001\002" +
    "\000\006\004\060\010\057\001\002\000\020\011\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\047\uffbd\057\uffbd\061\uffbd\001\002" +
    "\000\004\026\ufff5\001\002\000\020\011\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\047\uffbe\057\uffbe\061\uffbe\001\002\000\004" +
    "\011\067\001\002\000\004\010\061\001\002\000\016\004" +
    "\054\005\056\006\050\010\043\035\044\056\045\001\002" +
    "\000\006\011\uffeb\061\065\001\002\000\004\011\064\001" +
    "\002\000\004\026\ufff6\001\002\000\016\004\054\005\056" +
    "\006\050\010\043\035\044\056\045\001\002\000\004\011" +
    "\uffec\001\002\000\004\026\ufff4\001\002\000\016\011\uffc1" +
    "\024\uffc1\026\uffc1\047\uffc1\057\uffc1\061\uffc1\001\002\000" +
    "\010\004\054\005\056\010\043\001\002\000\020\011\uffbf" +
    "\024\uffbf\025\071\026\uffbf\047\uffbf\057\uffbf\061\uffbf\001" +
    "\002\000\016\011\uffc0\024\uffc0\026\uffc0\047\uffc0\057\uffc0" +
    "\061\uffc0\001\002\000\014\011\uffc4\026\uffc4\047\uffc4\057" +
    "\uffc4\061\uffc4\001\002\000\010\004\054\005\056\010\043" +
    "\001\002\000\016\011\uffc2\024\075\026\uffc2\047\uffc2\057" +
    "\uffc2\061\uffc2\001\002\000\014\011\uffc3\026\uffc3\047\uffc3" +
    "\057\uffc3\061\uffc3\001\002\000\004\064\101\001\002\000" +
    "\004\010\102\001\002\000\004\011\103\001\002\000\012" +
    "\011\uffb2\026\uffb2\057\uffb2\061\uffb2\001\002\000\004\011" +
    "\105\001\002\000\020\011\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\047\uffbc\057\uffbc\061\uffbc\001\002\000\040\003\ufffc\004" +
    "\ufffc\011\ufffc\023\ufffc\026\ufffc\030\ufffc\031\ufffc\041\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\052\ufffc\053\ufffc\056\ufffc\061" +
    "\ufffc\001\002\000\040\003\ufff9\004\ufff9\011\ufff9\023\ufff9" +
    "\026\ufff9\030\ufff9\031\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\052\ufff9\053\ufff9\056\ufff9\061\ufff9\001\002\000\040" +
    "\003\ufffa\004\ufffa\011\ufffa\023\ufffa\026\ufffa\030\ufffa\031" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\052\ufffa\053\ufffa" +
    "\056\ufffa\061\ufffa\001\002\000\040\003\ufff8\004\ufff8\011" +
    "\ufff8\023\ufff8\026\ufff8\030\ufff8\031\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\052\ufff8\053\ufff8\056\ufff8\061\ufff8\001" +
    "\002\000\040\003\ufffb\004\ufffb\011\ufffb\023\ufffb\026\ufffb" +
    "\030\ufffb\031\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\052" +
    "\ufffb\053\ufffb\056\ufffb\061\ufffb\001\002\000\004\004\035" +
    "\001\002\000\004\054\ufffe\001\002\000\006\023\uffe5\034" +
    "\uffe5\001\002\000\020\003\030\023\uffe3\026\026\036\020" +
    "\051\021\053\027\055\025\001\002\000\004\023\120\001" +
    "\002\000\004\055\121\001\002\000\004\026\uffea\001\002" +
    "\000\004\010\123\001\002\000\004\011\124\001\002\000" +
    "\032\003\147\004\140\023\uff97\026\125\030\130\041\126" +
    "\042\141\043\152\044\150\052\146\053\027\056\135\001" +
    "\002\000\040\003\147\004\140\023\uff97\026\125\030\130" +
    "\033\uff97\041\126\042\141\043\152\044\150\052\146\053" +
    "\027\056\135\063\uff97\065\uff97\001\002\000\004\004\346" +
    "\001\002\000\004\026\343\001\002\000\004\026\341\001" +
    "\002\000\004\023\333\001\002\000\004\026\331\001\002" +
    "\000\004\026\327\001\002\000\004\026\325\001\002\000" +
    "\004\016\301\001\002\000\004\026\277\001\002\000\004" +
    "\026\275\001\002\000\010\010\260\016\261\031\262\001" +
    "\002\000\006\004\161\010\157\001\002\000\004\026\245" +
    "\001\002\000\004\026\243\001\002\000\004\026\241\001" +
    "\002\000\004\026\237\001\002\000\012\004\221\005\217" +
    "\006\223\035\220\001\002\000\040\003\147\004\140\023" +
    "\uff97\026\125\030\130\033\uff97\041\126\042\141\043\152" +
    "\044\150\052\146\053\027\056\135\063\uff97\065\uff97\001" +
    "\002\000\004\043\212\001\002\000\004\026\210\001\002" +
    "\000\006\004\161\010\157\001\002\000\004\026\154\001" +
    "\002\000\012\023\uff9a\033\uff9a\063\uff9a\065\uff9a\001\002" +
    "\000\044\003\uffc7\004\uffc7\011\uffc7\023\uffc7\026\uffc7\030" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\204" +
    "\050\uffc7\052\uffc7\053\uffc7\056\uffc7\065\uffc7\001\002\000" +
    "\042\003\uffca\004\uffca\011\uffca\023\uffca\026\uffca\030\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\201\050\uffca\052" +
    "\uffca\053\uffca\056\uffca\065\uffca\001\002\000\006\004\161" +
    "\010\157\001\002\000\032\003\147\004\140\023\uff97\026" +
    "\125\030\130\041\126\042\141\043\152\044\150\052\146" +
    "\053\027\056\135\001\002\000\006\014\162\031\164\001" +
    "\002\000\014\004\uffcf\005\uffcf\006\uffcf\007\uffcf\035\uffcf" +
    "\001\002\000\014\004\170\005\165\006\171\007\167\035" +
    "\166\001\002\000\014\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\035\uffce\001\002\000\044\003\uffd3\004\uffd3\011\uffd3\023" +
    "\uffd3\026\uffd3\030\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\050\uffd3\052\uffd3\053\uffd3\056\uffd3\065" +
    "\uffd3\001\002\000\044\003\uffd2\004\uffd2\011\uffd2\023\uffd2" +
    "\026\uffd2\030\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\050\uffd2\052\uffd2\053\uffd2\056\uffd2\065\uffd2" +
    "\001\002\000\004\007\172\001\002\000\044\003\uffd4\004" +
    "\uffd4\011\uffd4\023\uffd4\026\uffd4\030\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\052\uffd4\053" +
    "\uffd4\056\uffd4\065\uffd4\001\002\000\044\003\uffd1\004\uffd1" +
    "\011\uffd1\023\uffd1\026\uffd1\030\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1\052\uffd1\053\uffd1" +
    "\056\uffd1\065\uffd1\001\002\000\044\003\uffd0\004\uffd0\011" +
    "\uffd0\023\uffd0\026\uffd0\030\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\050\uffd0\052\uffd0\053\uffd0\056" +
    "\uffd0\065\uffd0\001\002\000\004\023\174\001\002\000\004" +
    "\043\175\001\002\000\004\026\uff91\001\002\000\004\011" +
    "\177\001\002\000\040\003\uffcc\004\uffcc\011\uffcc\023\uffcc" +
    "\026\uffcc\030\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\050" +
    "\uffcc\052\uffcc\053\uffcc\056\uffcc\065\uffcc\001\002\000\040" +
    "\003\uffcd\004\uffcd\011\uffcd\023\uffcd\026\uffcd\030\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\050\uffcd\052\uffcd\053\uffcd" +
    "\056\uffcd\065\uffcd\001\002\000\004\004\161\001\002\000" +
    "\042\003\uffca\004\uffca\011\uffca\023\uffca\026\uffca\030\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\201\050\uffca\052" +
    "\uffca\053\uffca\056\uffca\065\uffca\001\002\000\040\003\uffcb" +
    "\004\uffcb\011\uffcb\023\uffcb\026\uffcb\030\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\050\uffcb\052\uffcb\053\uffcb\056\uffcb" +
    "\065\uffcb\001\002\000\004\004\161\001\002\000\042\003" +
    "\uffc9\004\uffc9\011\uffc9\023\uffc9\026\uffc9\030\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\050\uffc9\052\uffc9\053" +
    "\uffc9\056\uffc9\065\uffc9\001\002\000\044\003\uffc7\004\uffc7" +
    "\011\uffc7\023\uffc7\026\uffc7\030\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\204\050\uffc7\052\uffc7\053\uffc7" +
    "\056\uffc7\065\uffc7\001\002\000\042\003\uffc8\004\uffc8\011" +
    "\uffc8\023\uffc8\026\uffc8\030\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\045\uffc8\050\uffc8\052\uffc8\053\uffc8\056\uffc8\065" +
    "\uffc8\001\002\000\040\003\147\004\140\023\uff97\026\125" +
    "\030\130\033\uff97\041\126\042\141\043\152\044\150\052" +
    "\146\053\027\056\135\063\uff97\065\uff97\001\002\000\012" +
    "\023\uffa1\033\uffa1\063\uffa1\065\uffa1\001\002\000\006\004" +
    "\161\010\157\001\002\000\032\003\147\004\140\026\125" +
    "\030\130\041\126\042\141\043\152\044\150\052\146\053" +
    "\027\056\135\065\uff97\001\002\000\004\065\215\001\002" +
    "\000\004\026\uff90\001\002\000\012\023\uff98\033\uff98\063" +
    "\uff98\065\uff98\001\002\000\004\026\uffde\001\002\000\004" +
    "\026\uffdc\001\002\000\006\010\224\026\uffdd\001\002\000" +
    "\004\026\uffd9\001\002\000\004\026\uffdb\001\002\000\020" +
    "\004\226\005\056\006\050\010\043\011\225\035\044\056" +
    "\045\001\002\000\006\026\uff93\057\uff93\001\002\000\014" +
    "\011\uffbd\024\uffbd\025\uffbd\054\037\061\uffbd\001\002\000" +
    "\004\011\232\001\002\000\004\011\231\001\002\000\004" +
    "\026\uffda\001\002\000\006\026\uff94\057\uff94\001\002\000" +
    "\006\011\ufff1\061\234\001\002\000\004\004\236\001\002" +
    "\000\004\011\ufff2\001\002\000\004\054\037\001\002\000" +
    "\040\003\147\004\140\023\uff97\026\125\030\130\033\uff97" +
    "\041\126\042\141\043\152\044\150\052\146\053\027\056" +
    "\135\063\uff97\065\uff97\001\002\000\012\023\uff9f\033\uff9f" +
    "\063\uff9f\065\uff9f\001\002\000\040\003\147\004\140\023" +
    "\uff97\026\125\030\130\033\uff97\041\126\042\141\043\152" +
    "\044\150\052\146\053\027\056\135\063\uff97\065\uff97\001" +
    "\002\000\012\023\uffa4\033\uffa4\063\uffa4\065\uffa4\001\002" +
    "\000\040\003\147\004\140\023\uff97\026\125\030\130\033" +
    "\uff97\041\126\042\141\043\152\044\150\052\146\053\027" +
    "\056\135\063\uff97\065\uff97\001\002\000\012\023\uff9c\033" +
    "\uff9c\063\uff9c\065\uff9c\001\002\000\040\003\147\004\140" +
    "\023\uff97\026\125\030\130\033\uff97\041\126\042\141\043" +
    "\152\044\150\052\146\053\027\056\135\063\uff97\065\uff97" +
    "\001\002\000\012\023\uffa3\033\uffa3\063\uffa3\065\uffa3\001" +
    "\002\000\004\050\250\001\002\000\034\003\147\004\140" +
    "\023\uff97\026\125\030\130\033\uff97\041\126\042\141\043" +
    "\152\044\150\052\146\053\027\056\135\001\002\000\006" +
    "\023\253\033\252\001\002\000\032\003\147\004\140\023" +
    "\uff97\026\125\030\130\041\126\042\141\043\152\044\150" +
    "\052\146\053\027\056\135\001\002\000\004\042\254\001" +
    "\002\000\004\026\uffc6\001\002\000\004\023\256\001\002" +
    "\000\004\042\257\001\002\000\004\026\uffc5\001\002\000" +
    "\020\004\054\005\056\006\050\010\043\011\225\035\044" +
    "\056\045\001\002\000\004\004\266\001\002\000\016\004" +
    "\264\005\056\006\050\010\043\035\044\056\045\001\002" +
    "\000\006\026\uffb4\057\uffb4\001\002\000\014\010\260\024" +
    "\uffbd\025\uffbd\026\uffbd\057\uffbd\001\002\000\006\026\uffb6" +
    "\057\uffb6\001\002\000\006\010\267\031\270\001\002\000" +
    "\020\004\054\005\056\006\050\010\043\011\272\035\044" +
    "\056\045\001\002\000\016\004\054\005\056\006\050\010" +
    "\043\035\044\056\045\001\002\000\006\026\uffb5\057\uffb5" +
    "\001\002\000\004\026\uffb1\001\002\000\004\011\274\001" +
    "\002\000\004\026\uffb0\001\002\000\040\003\147\004\140" +
    "\023\uff97\026\125\030\130\033\uff97\041\126\042\141\043" +
    "\152\044\150\052\146\053\027\056\135\063\uff97\065\uff97" +
    "\001\002\000\012\023\uff9e\033\uff9e\063\uff9e\065\uff9e\001" +
    "\002\000\040\003\147\004\140\023\uff97\026\125\030\130" +
    "\033\uff97\041\126\042\141\043\152\044\150\052\146\053" +
    "\027\056\135\063\uff97\065\uff97\001\002\000\012\023\uffa5" +
    "\033\uffa5\063\uffa5\065\uffa5\001\002\000\006\060\302\064" +
    "\101\001\002\000\004\010\303\001\002\000\012\004\305" +
    "\005\056\006\307\010\043\001\002\000\010\011\uffab\047" +
    "\311\061\310\001\002\000\016\011\uffbd\016\317\024\uffbd" +
    "\025\uffbd\047\uffbd\061\uffbd\001\002\000\004\011\316\001" +
    "\002\000\010\011\uffac\047\311\061\310\001\002\000\012" +
    "\004\uffa8\005\uffa8\006\uffa8\010\uffa8\001\002\000\014\004" +
    "\uffa9\005\uffa9\006\uffa9\010\uffa9\027\314\001\002\000\012" +
    "\004\305\005\056\006\307\010\043\001\002\000\004\011" +
    "\uffaf\001\002\000\004\026\315\001\002\000\012\004\uffa7" +
    "\005\uffa7\006\uffa7\010\uffa7\001\002\000\004\026\uffb3\001" +
    "\002\000\004\004\320\001\002\000\010\011\uffaa\047\311" +
    "\061\310\001\002\000\012\004\305\005\056\006\307\010" +
    "\043\001\002\000\004\011\uffad\001\002\000\012\004\305" +
    "\005\056\006\307\010\043\001\002\000\004\011\uffae\001" +
    "\002\000\040\003\147\004\140\023\uff97\026\125\030\130" +
    "\033\uff97\041\126\042\141\043\152\044\150\052\146\053" +
    "\027\056\135\063\uff97\065\uff97\001\002\000\012\023\uffa6" +
    "\033\uffa6\063\uffa6\065\uffa6\001\002\000\040\003\147\004" +
    "\140\023\uff97\026\125\030\130\033\uff97\041\126\042\141" +
    "\043\152\044\150\052\146\053\027\056\135\063\uff97\065" +
    "\uff97\001\002\000\012\023\uff9d\033\uff9d\063\uff9d\065\uff9d" +
    "\001\002\000\040\003\147\004\140\023\uff97\026\125\030" +
    "\130\033\uff97\041\126\042\141\043\152\044\150\052\146" +
    "\053\027\056\135\063\uff97\065\uff97\001\002\000\012\023" +
    "\uffa0\033\uffa0\063\uffa0\065\uffa0\001\002\000\004\036\334" +
    "\001\002\000\020\003\030\023\uffe3\026\026\036\020\051" +
    "\021\053\027\055\025\001\002\000\004\023\337\001\002" +
    "\000\006\002\000\026\000\001\002\000\004\037\340\001" +
    "\002\000\006\002\uff8f\026\uff8f\001\002\000\040\003\147" +
    "\004\140\023\uff97\026\125\030\130\033\uff97\041\126\042" +
    "\141\043\152\044\150\052\146\053\027\056\135\063\uff97" +
    "\065\uff97\001\002\000\012\023\uff9b\033\uff9b\063\uff9b\065" +
    "\uff9b\001\002\000\040\003\147\004\140\023\uff97\026\125" +
    "\030\130\033\uff97\041\126\042\141\043\152\044\150\052" +
    "\146\053\027\056\135\063\uff97\065\uff97\001\002\000\012" +
    "\023\uffa2\033\uffa2\063\uffa2\065\uffa2\001\002\000\004\057" +
    "\351\001\002\000\006\016\347\031\262\001\002\000\004" +
    "\004\350\001\002\000\004\031\270\001\002\000\004\005" +
    "\352\001\002\000\032\003\147\004\140\026\125\030\130" +
    "\041\126\042\141\043\152\044\150\052\146\053\027\056" +
    "\135\063\uff97\001\002\000\004\063\354\001\002\000\004" +
    "\026\uff92\001\002\000\012\023\uff99\033\uff99\063\uff99\065" +
    "\uff99\001\002\000\022\003\030\023\uffe3\026\026\034\uffe3" +
    "\036\020\051\021\053\027\055\025\001\002\000\006\023" +
    "\uffe9\034\uffe9\001\002\000\022\003\030\023\uffe3\026\026" +
    "\034\uffe3\036\020\051\021\053\027\055\025\001\002\000" +
    "\006\023\uffe8\034\uffe8\001\002\000\004\010\363\001\002" +
    "\000\006\004\236\011\365\001\002\000\004\011\375\001" +
    "\002\000\034\003\147\004\140\023\uff97\026\125\030\130" +
    "\041\126\042\141\043\152\044\150\052\146\053\027\054" +
    "\037\056\135\001\002\000\004\023\373\001\002\000\032" +
    "\003\147\004\140\023\uff97\026\125\030\130\041\126\042" +
    "\141\043\152\044\150\052\146\053\027\056\135\001\002" +
    "\000\004\023\371\001\002\000\004\051\372\001\002\000" +
    "\004\026\uffd6\001\002\000\004\051\374\001\002\000\004" +
    "\026\uffd5\001\002\000\034\003\147\004\140\023\uff97\026" +
    "\125\030\130\041\126\042\141\043\152\044\150\052\146" +
    "\053\027\054\037\056\135\001\002\000\004\023\u0103\001" +
    "\002\000\032\003\147\004\140\023\uff97\026\125\030\130" +
    "\041\126\042\141\043\152\044\150\052\146\053\027\056" +
    "\135\001\002\000\004\023\u0101\001\002\000\004\051\u0102" +
    "\001\002\000\004\026\uffd8\001\002\000\004\051\u0104\001" +
    "\002\000\004\026\uffd7\001\002\000\004\010\u0111\001\002" +
    "\000\004\010\u0107\001\002\000\006\004\236\011\u0109\001" +
    "\002\000\004\011\u010d\001\002\000\032\003\147\004\140" +
    "\023\uff97\026\125\030\130\041\126\042\141\043\152\044" +
    "\150\052\146\053\027\056\135\001\002\000\004\023\u010b" +
    "\001\002\000\004\036\u010c\001\002\000\004\026\uffe1\001" +
    "\002\000\032\003\147\004\140\023\uff97\026\125\030\130" +
    "\041\126\042\141\043\152\044\150\052\146\053\027\056" +
    "\135\001\002\000\004\023\u010f\001\002\000\004\036\u0110" +
    "\001\002\000\004\026\uffe2\001\002\000\006\004\236\011" +
    "\u0113\001\002\000\004\011\u0117\001\002\000\032\003\147" +
    "\004\140\023\uff97\026\125\030\130\041\126\042\141\043" +
    "\152\044\150\052\146\053\027\056\135\001\002\000\004" +
    "\023\u0115\001\002\000\004\036\u0116\001\002\000\004\026" +
    "\uffe0\001\002\000\032\003\147\004\140\023\uff97\026\125" +
    "\030\130\041\126\042\141\043\152\044\150\052\146\053" +
    "\027\056\135\001\002\000\004\023\u0119\001\002\000\004" +
    "\036\u011a\001\002\000\004\026\uffdf\001\002\000\022\003" +
    "\030\023\uffe3\026\026\034\uffe3\036\020\051\021\053\027" +
    "\055\025\001\002\000\006\023\uffe6\034\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011a\000\006\002\006\055\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\055\014\001\001" +
    "\000\004\037\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\022\006\016\010" +
    "\030\025\021\053\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\022" +
    "\006\016\010\030\025\021\053\114\001\001\000\004\014" +
    "\035\001\001\000\014\004\022\006\016\010\030\025\021" +
    "\053\033\001\001\000\002\001\001\000\014\004\022\006" +
    "\016\010\030\025\021\053\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\037\001" +
    "\001\000\002\001\001\000\004\035\040\001\001\000\002" +
    "\001\001\000\014\016\050\034\054\050\046\052\045\060" +
    "\051\001\001\000\010\016\050\050\046\052\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\073\001\001\000\002\001\001\000\004\051\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\050\033\062\034\061\050" +
    "\046\052\045\060\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\050\033\065\034" +
    "\061\050\046\052\045\060\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\071\001" +
    "\001\000\004\051\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\050\050\075\001\001\000\004\047" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\022\006\016\010\030\025\021\053\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\133\005" +
    "\150\007\136\011\131\012\144\015\143\020\130\026\141" +
    "\031\126\036\142\044\152\056\135\060\132\001\001\000" +
    "\034\004\133\005\150\007\136\011\131\012\144\015\143" +
    "\020\354\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\004\015\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\155\030\246\040\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\221\001\001\000\034\004\133\005\150\007\136\011\131" +
    "\012\144\015\143\020\215\026\141\031\126\036\142\044" +
    "\152\056\135\060\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\155\030\157\040\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\204\001\001" +
    "\000\004\042\177\001\001\000\010\027\155\030\175\040" +
    "\154\001\001\000\034\004\133\005\150\007\136\011\131" +
    "\012\144\015\143\020\172\026\141\031\126\036\142\044" +
    "\152\056\135\060\132\001\001\000\004\043\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\201\040" +
    "\154\001\001\000\004\042\202\001\001\000\002\001\001" +
    "\000\004\040\205\001\001\000\002\001\001\000\004\041" +
    "\206\001\001\000\002\001\001\000\034\004\133\005\150" +
    "\007\136\011\131\012\144\015\143\020\210\026\141\031" +
    "\126\036\142\044\152\056\135\060\132\001\001\000\002" +
    "\001\001\000\010\027\155\030\212\040\154\001\001\000" +
    "\034\004\133\005\150\007\136\011\131\012\144\015\143" +
    "\020\213\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\050" +
    "\023\227\033\226\034\061\050\046\052\045\060\051\001" +
    "\001\000\002\001\001\000\004\024\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\234\001\001\000\002" +
    "\001\001\000\004\024\232\001\001\000\034\004\133\005" +
    "\150\007\136\011\131\012\144\015\143\020\237\026\141" +
    "\031\126\036\142\044\152\056\135\060\132\001\001\000" +
    "\002\001\001\000\034\004\133\005\150\007\136\011\131" +
    "\012\144\015\143\020\241\026\141\031\126\036\142\044" +
    "\152\056\135\060\132\001\001\000\002\001\001\000\034" +
    "\004\133\005\150\007\136\011\131\012\144\015\143\020" +
    "\243\026\141\031\126\036\142\044\152\056\135\060\132" +
    "\001\001\000\002\001\001\000\034\004\133\005\150\007" +
    "\136\011\131\012\144\015\143\020\245\026\141\031\126" +
    "\036\142\044\152\056\135\060\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\133\005\150\007\136" +
    "\011\131\012\144\015\143\020\250\026\141\031\126\036" +
    "\142\044\152\056\135\060\132\001\001\000\002\001\001" +
    "\000\034\004\133\005\150\007\136\011\131\012\144\015" +
    "\143\020\254\026\141\031\126\036\142\044\152\056\135" +
    "\060\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\050\033\226\034\061\050\046\052\045\060\051\001" +
    "\001\000\002\001\001\000\016\016\050\034\264\044\262" +
    "\050\046\052\045\060\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\050\033\272\034\061\050\046\052\045\060\051\001" +
    "\001\000\014\016\050\034\270\050\046\052\045\060\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\133\005\150\007\136" +
    "\011\131\012\144\015\143\020\275\026\141\031\126\036" +
    "\142\044\152\056\135\060\132\001\001\000\002\001\001" +
    "\000\034\004\133\005\150\007\136\011\131\012\144\015" +
    "\143\020\277\026\141\031\126\036\142\044\152\056\135" +
    "\060\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\050\050\046\052\303\057\305" +
    "\001\001\000\004\054\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\050\050\046\052\303\057" +
    "\312\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\320\001\001\000\012\016\050\050\046\052\303\057\321" +
    "\001\001\000\002\001\001\000\012\016\050\050\046\052" +
    "\303\057\323\001\001\000\002\001\001\000\034\004\133" +
    "\005\150\007\136\011\131\012\144\015\143\020\325\026" +
    "\141\031\126\036\142\044\152\056\135\060\132\001\001" +
    "\000\002\001\001\000\034\004\133\005\150\007\136\011" +
    "\131\012\144\015\143\020\327\026\141\031\126\036\142" +
    "\044\152\056\135\060\132\001\001\000\002\001\001\000" +
    "\034\004\133\005\150\007\136\011\131\012\144\015\143" +
    "\020\331\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\022\006\016\010\030\025\021\053\334\001\001\000" +
    "\004\017\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\133\005\150\007\136\011" +
    "\131\012\144\015\143\020\341\026\141\031\126\036\142" +
    "\044\152\056\135\060\132\001\001\000\002\001\001\000" +
    "\034\004\133\005\150\007\136\011\131\012\144\015\143" +
    "\020\343\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\133\005\150\007\136\011\131\012\144" +
    "\015\143\020\352\026\141\031\126\036\142\044\152\056" +
    "\135\060\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\022\006\016\010\030\025" +
    "\021\053\356\001\001\000\002\001\001\000\014\004\022" +
    "\006\016\010\030\025\021\053\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\363\001\001\000\002" +
    "\001\001\000\036\004\133\005\150\007\136\011\131\012" +
    "\144\015\143\020\365\024\366\026\141\031\126\036\142" +
    "\044\152\056\135\060\132\001\001\000\002\001\001\000" +
    "\034\004\133\005\150\007\136\011\131\012\144\015\143" +
    "\020\367\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\133\005\150\007\136\011\131\012\144\015\143\020\375" +
    "\024\376\026\141\031\126\036\142\044\152\056\135\060" +
    "\132\001\001\000\002\001\001\000\034\004\133\005\150" +
    "\007\136\011\131\012\144\015\143\020\377\026\141\031" +
    "\126\036\142\044\152\056\135\060\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0107\001\001\000\002\001\001\000\034\004" +
    "\133\005\150\007\136\011\131\012\144\015\143\020\u0109" +
    "\026\141\031\126\036\142\044\152\056\135\060\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\133\005\150\007\136\011\131\012\144\015" +
    "\143\020\u010d\026\141\031\126\036\142\044\152\056\135" +
    "\060\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0111\001\001\000\002\001\001" +
    "\000\034\004\133\005\150\007\136\011\131\012\144\015" +
    "\143\020\u0113\026\141\031\126\036\142\044\152\056\135" +
    "\060\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\133\005\150\007\136\011\131" +
    "\012\144\015\143\020\u0117\026\141\031\126\036\142\044" +
    "\152\056\135\060\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\022\006\016\010" +
    "\030\025\021\053\u011b\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis, no se esperaba este token: ["+ s.value +"] Linea " +(s.right)+" columna " +(s.left) );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SentenciaModulo Identificador CUERPO_ESTRUCTURA Main parentesisE parentesisC CUERPO End Sub CUERPO_ESTRUCTURA FINAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VARIABLES ::= Identificador coma VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VARIABLES ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPODATO ::= AS Integer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPODATO ::= AS Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= AS Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= AS String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPODATO ::= AS Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= Dim VARIABLES TIPODATO IGUALDAD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALDAD ::= Igual New Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUALDAD ::= Igual DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUALDAD ::= Igual New parentesisE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IGUALDAD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= Identificador TIPODATO coma PARAMETROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= Identificador TIPODATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATO ::= ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATO ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATO ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATO ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS2 ::= DATO coma PARAMETROS2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS2 ::= DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURA ::= struct Identificador CUERPO_ESTRUCTURA End struct 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_ESTRUCTURA ::= DECLARACION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_ESTRUCTURA ::= ESTRUCTURA Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_ESTRUCTURA ::= FUNCION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_ESTRUCTURA ::= PARA_SUB Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_ESTRUCTURA ::= Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_ESTRUCTURA ::= error CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_ESTRUCTURA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARA_SUB ::= Sub Identificador parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARA_SUB ::= Sub Identificador parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARA_SUB ::= Sub New parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARA_SUB ::= Sub New parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETORNO ::= Return Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETORNO ::= Return Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETORNO ::= Return Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETORNO ::= Return Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RETORNO ::= Return Identificador parentesisE PARAMETROS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNO ::= Return RECURSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC CUERPO End Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= Function Identificador parentesisE parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= Function Identificador parentesisE parentesisC CUERPO End Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Op_Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Comilla Comilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMPARACION ::= OperadorRelacional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPARACION ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_IF ::= LOGICOAND LOGICOOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_IF ::= parentesisE DECLARACION_IF parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOGICOOR ::= OR LOGICOAND LOGICOOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICOOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOGICOOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICOOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOGICOAND ::= SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICOAND",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOGICOAND_Prima ::= And SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOGICOAND_Prima ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_IF ::= IF DECLARACION_IF then CUERPO End IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELSE_IF ::= IF DECLARACION_IF then CUERPO Else CUERPO End IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITMETICOS ::= MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICOS",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADICIONES ::= OPRestSuma MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADICIONES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ADICIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADICIONES",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MULTIPLICACIONES ::= VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MULTIPLICACIONES_PRIMA ::= OPMultDiv VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MULTIPLICACIONES_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES_NUMERICOS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES_NUMERICOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES_NUMERICOS ::= parentesisE ARITMETICOS parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RECURSIVIDAD ::= RECURSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RECURSIVIDAD ::= RECURSION OPRestSuma ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RECURSIVIDAD ::= RECURSION OPMultDiv ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RECURSIVIDAD ::= ARITMETICOS OPRestSuma RECURSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RECURSIVIDAD ::= ARITMETICOS OPMultDiv RECURSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= Identificador Igual DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= Identificador Punto Identificador Igual DATO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= Identificador Igual RECURSION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IMPRIMIR ::= Console Punto WriteLine parentesisE CONCATENACION parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LEER ::= Console Punto ReadLine parentesisE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONCATENACION ::= Cadena CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONCATENACION ::= ARITMETICOS CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONCATENACION ::= Identificador Punto Identificador CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONCATENACION ::= ARITMETICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONCATENACION ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONCATENABLES ::= concatenacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONCATENABLES ::= coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONCATENABLES ::= concatenacion ContinuacionLinea Enter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPO ::= DECLARACION Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPO ::= IMPRIMIR Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPO ::= ASIGNACION Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPO ::= SENTENCIA_IF Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO ::= ELSE_IF Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO ::= DECLARACION_FOR Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO ::= WHILE Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO ::= DO_WHILE Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO ::= RETORNO Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO ::= LEER Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO ::= LLAMADA_FUNCION Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO ::= Comentario Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO ::= RECURSION Enter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO ::= Enter CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= error CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // GLOBALES ::= DECLARACION GLOBALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // GLOBALES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GLOBALES",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RECURSION ::= Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RECURSION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RECURSION ::= Identificador parentesisE parentesisC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RECURSION",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION_FOR ::= For ASIGNACION TO Numero CUERPO Next 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // WHILE ::= While DECLARACION_IF CUERPO End While 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DO_WHILE ::= Do While DECLARACION_IF CUERPO Loop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FINAL ::= End SentenciaModulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DESPUES ::= Enter DESPUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESPUES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DESPUES ::= Enter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESPUES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PROGRAMA ::= Enter PROGRAMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PROGRAMA ::= INICIO DESPUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
