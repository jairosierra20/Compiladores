
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupArbol extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CupArbol() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupArbol(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupArbol(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\066\002\000\002\067" +
    "\002\000\002\002\017\000\002\014\005\000\002\014\003" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\004\006\000\002\037\010\000\002" +
    "\037\007\000\002\037\004\000\002\037\006\000\002\037" +
    "\002\000\002\025\006\000\002\025\004\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\035\005\000\002\035\003\000\002\035\005\000\002" +
    "\035\003\000\002\027\007\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\004" +
    "\000\002\057\002\000\002\020\005\000\002\020\004\000" +
    "\002\020\002\000\002\070\002\000\002\071\002\000\002" +
    "\006\014\000\002\072\002\000\002\073\002\000\002\006" +
    "\013\000\002\074\002\000\002\075\002\000\002\006\013" +
    "\000\002\076\002\000\002\077\002\000\002\006\014\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\007\000\002\007\004\000\002\100" +
    "\002\000\002\101\002\000\002\010\017\000\002\102\002" +
    "\000\002\103\002\000\002\010\014\000\002\104\002\000" +
    "\002\105\002\000\002\010\014\000\002\106\002\000\002" +
    "\107\002\000\002\010\013\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\043\006\000\002\043\003" +
    "\000\002\043\005\000\002\046\003\000\002\046\003\000" +
    "\002\110\002\000\002\032\005\000\002\111\002\000\002" +
    "\045\007\000\002\045\002\000\002\112\002\000\002\031" +
    "\005\000\002\113\002\000\002\044\007\000\002\044\002" +
    "\000\002\030\012\000\002\033\016\000\002\016\002\000" +
    "\002\054\002\000\002\114\002\000\002\056\005\000\002" +
    "\115\002\000\002\052\006\000\002\052\002\000\002\116" +
    "\002\000\002\053\005\000\002\117\002\000\002\055\006" +
    "\000\002\055\002\000\002\017\003\000\002\017\003\000" +
    "\002\120\002\000\002\017\006\000\002\017\005\000\002" +
    "\050\003\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\015\005\000\002\015\007" +
    "\000\002\015\005\000\002\062\010\000\002\064\007\000" +
    "\002\040\007\000\002\040\010\000\002\063\005\000\002" +
    "\063\005\000\002\063\003\000\002\063\003\000\002\063" +
    "\005\000\002\063\003\000\002\060\003\000\002\060\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\002\000\002\047\006\000\002\047\005\000" +
    "\002\121\002\000\002\005\014\000\002\005\012\000\002" +
    "\011\012\000\002\012\012\000\002\021\004\000\002\042" +
    "\004\000\002\042\003\000\002\041\004\000\002\041\003" +
    "\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\006\026\005\037\004\001\002\000\004\004" +
    "\015\001\002\000\006\026\005\037\004\001\002\000\006" +
    "\002\uff6d\026\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\010\002\uff6f\023\uff6f\026\011" +
    "\001\002\000\004\002\uff6c\001\002\000\006\002\uff70\023" +
    "\uff70\001\002\000\004\002\uff6e\001\002\000\016\026\025" +
    "\034\uffe1\036\017\051\020\053\026\055\024\001\002\000" +
    "\004\026\u014e\001\002\000\006\004\u0131\066\u0130\001\002" +
    "\000\004\004\u0105\001\002\000\004\026\u0103\001\002\000" +
    "\004\034\147\001\002\000\004\026\145\001\002\000\004" +
    "\004\134\001\002\000\020\023\uffe1\026\025\034\uffe1\036" +
    "\017\051\020\053\026\055\024\001\002\000\004\004\033" +
    "\001\002\000\004\026\030\001\002\000\020\023\uffe1\026" +
    "\025\034\uffe1\036\017\051\020\053\026\055\024\001\002" +
    "\000\006\023\uffe4\034\uffe4\001\002\000\004\054\036\001" +
    "\002\000\006\054\ufffc\061\034\001\002\000\004\004\033" +
    "\001\002\000\004\054\ufffd\001\002\000\012\004\131\012" +
    "\127\015\132\062\130\001\002\000\006\026\ufff2\031\041" +
    "\001\002\000\004\026\ufff7\001\002\000\020\004\053\005" +
    "\055\006\047\010\042\035\043\056\044\066\052\001\002" +
    "\000\010\004\uff9d\005\uff9d\010\uff9d\001\002\000\012\011" +
    "\uffee\026\uffee\057\uffee\061\uffee\001\002\000\004\016\120" +
    "\001\002\000\012\011\uffef\026\uffef\057\uffef\061\uffef\001" +
    "\002\000\016\011\uffa9\024\uffa9\026\uffa9\047\uffa9\057\uffa9" +
    "\061\uffa9\001\002\000\012\011\uffed\026\uffed\057\uffed\061" +
    "\uffed\001\002\000\020\011\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\047\uffa4\057\uffa4\061\uffa4\001\002\000\012\011\uffec\026" +
    "\uffec\057\uffec\061\uffec\001\002\000\004\004\077\001\002" +
    "\000\014\010\056\016\057\024\uff9e\025\uff9e\026\uff9e\001" +
    "\002\000\004\026\ufff4\001\002\000\052\004\uff9f\011\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\053\uff9f\056\uff9f\057\uff9f\061\uff9f\065\uff9f\001\002\000" +
    "\020\004\063\005\055\006\047\010\042\011\061\035\043" +
    "\056\044\001\002\000\004\004\060\001\002\000\052\004" +
    "\uff9b\011\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047" +
    "\uff9b\050\uff9b\053\uff9b\056\uff9b\057\uff9b\061\uff9b\065\uff9b" +
    "\001\002\000\004\026\ufff3\001\002\000\006\011\uffe8\061" +
    "\075\001\002\000\024\010\071\011\uff9e\016\057\024\uff9e" +
    "\025\uff9e\026\uff9e\047\uff9e\057\uff9e\061\uff9e\001\002\000" +
    "\006\011\uffea\061\067\001\002\000\004\011\066\001\002" +
    "\000\004\026\ufff5\001\002\000\016\004\063\005\055\006" +
    "\047\010\042\035\043\056\044\001\002\000\004\011\uffeb" +
    "\001\002\000\020\004\063\005\055\006\047\010\042\011" +
    "\072\035\043\056\044\001\002\000\014\011\uff77\026\uff77" +
    "\047\uff77\057\uff77\061\uff77\001\002\000\004\011\074\001" +
    "\002\000\014\011\uff78\026\uff78\047\uff78\057\uff78\061\uff78" +
    "\001\002\000\016\004\063\005\055\006\047\010\042\035" +
    "\043\056\044\001\002\000\004\011\uffe9\001\002\000\004" +
    "\010\100\001\002\000\016\004\063\005\055\006\047\010" +
    "\042\035\043\056\044\001\002\000\004\011\102\001\002" +
    "\000\004\026\ufff6\001\002\000\020\011\uffa0\024\uffa0\025" +
    "\105\026\uffa0\047\uffa0\057\uffa0\061\uffa0\001\002\000\016" +
    "\011\uffa3\024\uffa3\026\uffa3\047\uffa3\057\uffa3\061\uffa3\001" +
    "\002\000\010\004\107\005\055\010\042\001\002\000\020" +
    "\011\uffa2\024\uffa2\025\uffa2\026\uffa2\047\uffa2\057\uffa2\061" +
    "\uffa2\001\002\000\054\004\uff9e\011\uff9e\016\057\023\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\030\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\053\uff9e" +
    "\056\uff9e\057\uff9e\061\uff9e\065\uff9e\001\002\000\020\011" +
    "\uffa0\024\uffa0\025\105\026\uffa0\047\uffa0\057\uffa0\061\uffa0" +
    "\001\002\000\016\011\uffa1\024\uffa1\026\uffa1\047\uffa1\057" +
    "\uffa1\061\uffa1\001\002\000\016\011\uffa5\024\114\026\uffa5" +
    "\047\uffa5\057\uffa5\061\uffa5\001\002\000\014\011\uffa8\026" +
    "\uffa8\047\uffa8\057\uffa8\061\uffa8\001\002\000\010\004\107" +
    "\005\055\010\042\001\002\000\016\011\uffa7\024\uffa7\026" +
    "\uffa7\047\uffa7\057\uffa7\061\uffa7\001\002\000\016\011\uffa5" +
    "\024\114\026\uffa5\047\uffa5\057\uffa5\061\uffa5\001\002\000" +
    "\014\011\uffa6\026\uffa6\047\uffa6\057\uffa6\061\uffa6\001\002" +
    "\000\004\064\121\001\002\000\004\010\122\001\002\000" +
    "\004\011\123\001\002\000\012\011\uff91\026\uff91\057\uff91" +
    "\061\uff91\001\002\000\010\004\107\005\055\010\042\001" +
    "\002\000\004\011\126\001\002\000\052\004\uff9c\011\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\053\uff9c\056\uff9c\057\uff9c\061\uff9c\065\uff9c\001\002\000" +
    "\036\004\ufffb\011\ufffb\023\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\052\ufffb\053\ufffb\056" +
    "\ufffb\061\ufffb\001\002\000\036\004\ufff9\011\ufff9\023\ufff9" +
    "\026\ufff9\030\ufff9\031\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\052\ufff9\053\ufff9\056\ufff9\061\ufff9\001\002\000\036" +
    "\004\ufff8\011\ufff8\023\ufff8\026\ufff8\030\ufff8\031\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\052\ufff8\053\ufff8\056\ufff8" +
    "\061\ufff8\001\002\000\036\004\ufffa\011\ufffa\023\ufffa\026" +
    "\ufffa\030\ufffa\031\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\052\ufffa\053\ufffa\056\ufffa\061\ufffa\001\002\000\006\023" +
    "\uffe2\034\uffe2\001\002\000\010\023\uffde\026\136\053\026" +
    "\001\002\000\004\026\143\001\002\000\010\023\uffde\026" +
    "\136\053\026\001\002\000\004\023\140\001\002\000\004" +
    "\055\141\001\002\000\004\026\uffe7\001\002\000\004\023" +
    "\uffdf\001\002\000\010\023\uffde\026\136\053\026\001\002" +
    "\000\004\023\uffe0\001\002\000\020\023\uffe1\026\025\034" +
    "\uffe1\036\017\051\020\053\026\055\024\001\002\000\006" +
    "\023\uffe6\034\uffe6\001\002\000\004\010\000\001\002\000" +
    "\004\010\151\001\002\000\004\011\152\001\002\000\026" +
    "\004\165\023\uff79\026\154\030\156\041\153\042\166\043" +
    "\175\044\173\053\026\056\163\001\002\000\004\004\uffab" +
    "\001\002\000\036\004\165\023\uff79\026\154\030\156\033" +
    "\uff79\041\153\042\166\043\175\044\173\052\uff79\053\026" +
    "\056\163\063\uff79\065\uff79\001\002\000\004\026\360\001" +
    "\002\000\004\026\356\001\002\000\004\023\347\001\002" +
    "\000\004\026\345\001\002\000\004\026\343\001\002\000" +
    "\004\026\341\001\002\000\004\016\321\001\002\000\004" +
    "\026\317\001\002\000\010\010\071\016\304\031\305\001" +
    "\002\000\010\004\207\010\205\035\204\001\002\000\004" +
    "\026\264\001\002\000\004\026\262\001\002\000\004\026" +
    "\260\001\002\000\004\026\256\001\002\000\004\043\247" +
    "\001\002\000\004\026\245\001\002\000\010\004\uffab\010" +
    "\uffab\035\uffab\001\002\000\004\026\177\001\002\000\036" +
    "\004\165\023\uff79\026\154\030\156\033\uff79\041\153\042" +
    "\166\043\175\044\173\052\uff79\053\026\056\163\063\uff79" +
    "\065\uff79\001\002\000\014\023\uff7b\033\uff7b\052\uff7b\063" +
    "\uff7b\065\uff7b\001\002\000\010\004\207\010\205\035\204" +
    "\001\002\000\040\004\uffb2\011\uffb2\023\uffb2\026\uffb2\030" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\050\uffb2\053\uffb2\056\uffb2\065\uffb2\001\002\000\036\004" +
    "\uffb7\011\uffb7\023\uffb7\026\uffb7\030\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\045\uffb7\050\uffb7\053\uffb7\056\uffb7\065" +
    "\uffb7\001\002\000\040\004\uffbb\011\uffbb\023\uffbb\026\uffbb" +
    "\030\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\050\uffbb\053\uffbb\056\uffbb\065\uffbb\001\002\000\010" +
    "\004\207\010\205\035\204\001\002\000\026\004\uffab\023" +
    "\uffab\026\uffab\030\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\053\uffab\056\uffab\001\002\000\006\014\210\031\212\001" +
    "\002\000\016\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\035\uffb9\001\002\000\016\004\107\005\055\006\216\007" +
    "\215\010\042\035\213\001\002\000\016\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\035\uffb8\001\002\000\040\004" +
    "\uffbe\011\uffbe\023\uffbe\026\uffbe\030\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\053\uffbe\056" +
    "\uffbe\065\uffbe\001\002\000\040\004\uffbf\011\uffbf\023\uffbf" +
    "\026\uffbf\030\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\050\uffbf\053\uffbf\056\uffbf\065\uffbf\001\002" +
    "\000\004\007\217\001\002\000\040\004\uffbd\011\uffbd\023" +
    "\uffbd\026\uffbd\030\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\050\uffbd\053\uffbd\056\uffbd\065\uffbd\001" +
    "\002\000\040\004\uffbc\011\uffbc\023\uffbc\026\uffbc\030\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050" +
    "\uffbc\053\uffbc\056\uffbc\065\uffbc\001\002\000\026\004\165" +
    "\023\uff79\026\154\030\156\041\153\042\166\043\175\044" +
    "\173\053\026\056\163\001\002\000\004\023\222\001\002" +
    "\000\004\043\223\001\002\000\004\026\uffab\001\002\000" +
    "\004\026\uff73\001\002\000\004\011\226\001\002\000\040" +
    "\004\uffba\011\uffba\023\uffba\026\uffba\030\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\053\uffba" +
    "\056\uffba\065\uffba\001\002\000\036\004\uffb3\011\uffb3\023" +
    "\uffb3\026\uffb3\030\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\231\050\uffb3\053\uffb3\056\uffb3\065\uffb3\001\002\000" +
    "\034\004\uffb6\011\uffb6\023\uffb6\026\uffb6\030\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\050\uffb6\053\uffb6\056\uffb6\065" +
    "\uffb6\001\002\000\010\004\uffab\010\uffab\035\uffab\001\002" +
    "\000\010\004\207\010\205\035\204\001\002\000\036\004" +
    "\uffb5\011\uffb5\023\uffb5\026\uffb5\030\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\050\uffb5\053\uffb5\056\uffb5\065" +
    "\uffb5\001\002\000\036\004\uffb3\011\uffb3\023\uffb3\026\uffb3" +
    "\030\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\231\050" +
    "\uffb3\053\uffb3\056\uffb3\065\uffb3\001\002\000\034\004\uffb4" +
    "\011\uffb4\023\uffb4\026\uffb4\030\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\050\uffb4\053\uffb4\056\uffb4\065\uffb4\001\002" +
    "\000\040\004\uffae\011\uffae\023\uffae\026\uffae\030\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\237\050\uffae" +
    "\053\uffae\056\uffae\065\uffae\001\002\000\010\004\uffab\010" +
    "\uffab\035\uffab\001\002\000\036\004\uffb1\011\uffb1\023\uffb1" +
    "\026\uffb1\030\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\050\uffb1\053\uffb1\056\uffb1\065\uffb1\001\002\000\010" +
    "\004\207\010\205\035\204\001\002\000\040\004\uffb0\011" +
    "\uffb0\023\uffb0\026\uffb0\030\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\050\uffb0\053\uffb0\056\uffb0\065" +
    "\uffb0\001\002\000\040\004\uffae\011\uffae\023\uffae\026\uffae" +
    "\030\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\237\050\uffae\053\uffae\056\uffae\065\uffae\001\002\000\036" +
    "\004\uffaf\011\uffaf\023\uffaf\026\uffaf\030\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\050\uffaf\053\uffaf\056\uffaf" +
    "\065\uffaf\001\002\000\036\004\165\023\uff79\026\154\030" +
    "\156\033\uff79\041\153\042\166\043\175\044\173\052\uff79" +
    "\053\026\056\163\063\uff79\065\uff79\001\002\000\014\023" +
    "\uff81\033\uff81\052\uff81\063\uff81\065\uff81\001\002\000\010" +
    "\004\uffab\010\uffab\035\uffab\001\002\000\010\004\207\010" +
    "\205\035\204\001\002\000\026\004\uffab\026\uffab\030\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\053\uffab\056\uffab\065" +
    "\uffab\001\002\000\026\004\165\026\154\030\156\041\153" +
    "\042\166\043\175\044\173\053\026\056\163\065\uff79\001" +
    "\002\000\004\065\254\001\002\000\004\026\uffab\001\002" +
    "\000\004\026\uff72\001\002\000\036\004\165\023\uff79\026" +
    "\154\030\156\033\uff79\041\153\042\166\043\175\044\173" +
    "\052\uff79\053\026\056\163\063\uff79\065\uff79\001\002\000" +
    "\014\023\uff7f\033\uff7f\052\uff7f\063\uff7f\065\uff7f\001\002" +
    "\000\036\004\165\023\uff79\026\154\030\156\033\uff79\041" +
    "\153\042\166\043\175\044\173\052\uff79\053\026\056\163" +
    "\063\uff79\065\uff79\001\002\000\014\023\uff84\033\uff84\052" +
    "\uff84\063\uff84\065\uff84\001\002\000\036\004\165\023\uff79" +
    "\026\154\030\156\033\uff79\041\153\042\166\043\175\044" +
    "\173\052\uff79\053\026\056\163\063\uff79\065\uff79\001\002" +
    "\000\014\023\uff7d\033\uff7d\052\uff7d\063\uff7d\065\uff7d\001" +
    "\002\000\036\004\165\023\uff79\026\154\030\156\033\uff79" +
    "\041\153\042\166\043\175\044\173\052\uff79\053\026\056" +
    "\163\063\uff79\065\uff79\001\002\000\014\023\uff83\033\uff83" +
    "\052\uff83\063\uff83\065\uff83\001\002\000\004\050\267\001" +
    "\002\000\030\004\uffab\023\uffab\026\uffab\030\uffab\033\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\053\uffab\056\uffab\001" +
    "\002\000\030\004\165\023\uff79\026\154\030\156\033\uff79" +
    "\041\153\042\166\043\175\044\173\053\026\056\163\001" +
    "\002\000\006\023\273\033\272\001\002\000\026\004\uffaa" +
    "\023\uffaa\026\uffaa\030\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\053\uffaa\056\uffaa\001\002\000\004\042\274\001\002" +
    "\000\004\026\uffab\001\002\000\004\026\uffad\001\002\000" +
    "\026\004\uffab\023\uffab\026\uffab\030\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\053\uffab\056\uffab\001\002\000\026\004" +
    "\165\023\uff79\026\154\030\156\041\153\042\166\043\175" +
    "\044\173\053\026\056\163\001\002\000\004\023\301\001" +
    "\002\000\004\042\302\001\002\000\004\026\uffab\001\002" +
    "\000\004\026\uffac\001\002\000\004\004\310\001\002\000" +
    "\016\004\063\005\055\006\047\010\042\035\043\056\044" +
    "\001\002\000\006\026\uff93\057\uff93\001\002\000\006\026" +
    "\uff95\057\uff95\001\002\000\006\010\311\031\312\001\002" +
    "\000\020\004\063\005\055\006\047\010\042\011\314\035" +
    "\043\056\044\001\002\000\016\004\107\005\055\006\047" +
    "\010\042\035\043\056\044\001\002\000\006\026\uff94\057" +
    "\uff94\001\002\000\004\026\uff90\001\002\000\004\011\316" +
    "\001\002\000\004\026\uff8f\001\002\000\036\004\165\023" +
    "\uff79\026\154\030\156\033\uff79\041\153\042\166\043\175" +
    "\044\173\052\uff79\053\026\056\163\063\uff79\065\uff79\001" +
    "\002\000\014\023\uff85\033\uff85\052\uff85\063\uff85\065\uff85" +
    "\001\002\000\006\060\322\064\121\001\002\000\004\010" +
    "\323\001\002\000\012\004\063\005\055\006\325\010\042" +
    "\001\002\000\010\011\uff8b\047\332\061\331\001\002\000" +
    "\010\011\uff8c\047\332\061\331\001\002\000\010\011\uff89" +
    "\047\332\061\331\001\002\000\004\011\330\001\002\000" +
    "\004\026\uff92\001\002\000\012\004\uff87\005\uff87\006\uff87" +
    "\010\uff87\001\002\000\012\004\uff88\005\uff88\006\uff88\010" +
    "\uff88\001\002\000\012\004\063\005\055\006\325\010\042" +
    "\001\002\000\004\011\uff8a\001\002\000\012\004\063\005" +
    "\055\006\325\010\042\001\002\000\004\011\uff8e\001\002" +
    "\000\012\004\063\005\055\006\325\010\042\001\002\000" +
    "\004\011\uff8d\001\002\000\036\004\165\023\uff79\026\154" +
    "\030\156\033\uff79\041\153\042\166\043\175\044\173\052" +
    "\uff79\053\026\056\163\063\uff79\065\uff79\001\002\000\014" +
    "\023\uff86\033\uff86\052\uff86\063\uff86\065\uff86\001\002\000" +
    "\036\004\165\023\uff79\026\154\030\156\033\uff79\041\153" +
    "\042\166\043\175\044\173\052\uff79\053\026\056\163\063" +
    "\uff79\065\uff79\001\002\000\014\023\uff7e\033\uff7e\052\uff7e" +
    "\063\uff7e\065\uff7e\001\002\000\036\004\165\023\uff79\026" +
    "\154\030\156\033\uff79\041\153\042\166\043\175\044\173" +
    "\052\uff79\053\026\056\163\063\uff79\065\uff79\001\002\000" +
    "\014\023\uff80\033\uff80\052\uff80\063\uff80\065\uff80\001\002" +
    "\000\004\036\uffff\001\002\000\004\036\351\001\002\000" +
    "\016\023\uffe1\026\025\036\017\051\020\053\026\055\024" +
    "\001\002\000\004\023\354\001\002\000\006\002\ufffe\026" +
    "\ufffe\001\002\000\004\037\355\001\002\000\006\002\uff71" +
    "\026\uff71\001\002\000\036\004\165\023\uff79\026\154\030" +
    "\156\033\uff79\041\153\042\166\043\175\044\173\052\uff79" +
    "\053\026\056\163\063\uff79\065\uff79\001\002\000\014\023" +
    "\uff7c\033\uff7c\052\uff7c\063\uff7c\065\uff7c\001\002\000\036" +
    "\004\165\023\uff79\026\154\030\156\033\uff79\041\153\042" +
    "\166\043\175\044\173\052\uff79\053\026\056\163\063\uff79" +
    "\065\uff79\001\002\000\014\023\uff82\033\uff82\052\uff82\063" +
    "\uff82\065\uff82\001\002\000\014\023\uff7a\033\uff7a\052\uff7a" +
    "\063\uff7a\065\uff7a\001\002\000\004\004\365\001\002\000" +
    "\004\057\370\001\002\000\006\016\366\031\305\001\002" +
    "\000\004\004\367\001\002\000\004\031\312\001\002\000" +
    "\006\004\372\005\371\001\002\000\026\004\uffab\026\uffab" +
    "\030\uffab\041\uffab\042\uffab\043\uffab\044\uffab\053\uffab\056" +
    "\uffab\063\uffab\001\002\000\026\004\uffab\026\uffab\030\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\053\uffab\056\uffab\063" +
    "\uffab\001\002\000\026\004\165\026\154\030\156\041\153" +
    "\042\166\043\175\044\173\053\026\056\163\063\uff79\001" +
    "\002\000\004\063\375\001\002\000\004\026\uff74\001\002" +
    "\000\026\004\uff76\026\uff76\030\uff76\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\053\uff76\056\uff76\063\uff76\001\002\000\026" +
    "\004\165\026\154\030\156\041\153\042\166\043\175\044" +
    "\173\053\026\056\163\063\uff79\001\002\000\004\063\u0101" +
    "\001\002\000\004\026\uffab\001\002\000\004\026\uff75\001" +
    "\002\000\020\023\uffe1\026\025\034\uffe1\036\017\051\020" +
    "\053\026\055\024\001\002\000\006\023\uffe5\034\uffe5\001" +
    "\002\000\004\010\u0106\001\002\000\006\004\u0108\011\u0109" +
    "\001\002\000\004\011\u0118\001\002\000\004\054\036\001" +
    "\002\000\030\004\uffc2\023\uffc2\026\uffc2\030\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\053\uffc2\054\036\056\uffc2\001" +
    "\002\000\026\004\165\023\uff79\026\154\030\156\041\153" +
    "\042\166\043\175\044\173\053\026\056\163\001\002\000" +
    "\026\004\uffc5\023\uffc5\026\uffc5\030\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\053\uffc5\056\uffc5\001\002\000\026\004" +
    "\165\023\uff79\026\154\030\156\041\153\042\166\043\175" +
    "\044\173\053\026\056\163\001\002\000\004\023\u010e\001" +
    "\002\000\004\051\uffc4\001\002\000\004\051\u0110\001\002" +
    "\000\004\026\uffc3\001\002\000\004\023\u0112\001\002\000" +
    "\004\051\uffc1\001\002\000\004\051\u0114\001\002\000\004" +
    "\026\uffc0\001\002\000\006\011\ufff0\061\u0116\001\002\000" +
    "\004\004\u0108\001\002\000\004\011\ufff1\001\002\000\030" +
    "\004\uffc8\023\uffc8\026\uffc8\030\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\053\uffc8\054\036\056\uffc8\001\002\000\026" +
    "\004\uffcb\026\uffcb\030\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\052\uffcb\053\uffcb\056\uffcb\001\002\000\026\004\165" +
    "\023\uff79\026\154\030\156\041\153\042\166\043\175\044" +
    "\173\053\026\056\163\001\002\000\004\023\u011c\001\002" +
    "\000\004\051\uffc7\001\002\000\004\051\u011e\001\002\000" +
    "\004\026\uffc6\001\002\000\026\004\165\026\154\030\156" +
    "\041\153\042\166\043\175\044\173\052\uff79\053\026\056" +
    "\163\001\002\000\004\052\u0122\001\002\000\004\026\011" +
    "\001\002\000\012\004\u0125\005\u0123\006\u0127\035\u0124\001" +
    "\002\000\004\026\uffd1\001\002\000\004\026\uffcf\001\002" +
    "\000\006\010\u0128\026\uffd0\001\002\000\004\026\uffcc\001" +
    "\002\000\004\026\uffce\001\002\000\020\004\u0129\005\055" +
    "\006\047\010\042\011\072\035\043\056\044\001\002\000" +
    "\020\010\071\011\uff9e\016\057\024\uff9e\025\uff9e\054\036" +
    "\061\uff9e\001\002\000\004\011\u012b\001\002\000\004\026" +
    "\uffcd\001\002\000\004\023\u012d\001\002\000\004\051\uffca" +
    "\001\002\000\004\051\u012f\001\002\000\004\026\uffc9\001" +
    "\002\000\004\010\u0140\001\002\000\004\010\u0132\001\002" +
    "\000\006\004\u0108\011\u0134\001\002\000\004\011\u013a\001" +
    "\002\000\026\004\uffda\023\uffda\026\uffda\030\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\053\uffda\056\uffda\001\002\000" +
    "\026\004\165\023\uff79\026\154\030\156\041\153\042\166" +
    "\043\175\044\173\053\026\056\163\001\002\000\004\023" +
    "\u0137\001\002\000\004\036\uffd9\001\002\000\004\036\u0139" +
    "\001\002\000\004\026\uffd8\001\002\000\026\004\uffdd\023" +
    "\uffdd\026\uffdd\030\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\053\uffdd\056\uffdd\001\002\000\026\004\165\023\uff79\026" +
    "\154\030\156\041\153\042\166\043\175\044\173\053\026" +
    "\056\163\001\002\000\004\023\u013d\001\002\000\004\036" +
    "\uffdc\001\002\000\004\036\u013f\001\002\000\004\026\uffdb" +
    "\001\002\000\006\004\u0108\011\u0142\001\002\000\004\011" +
    "\u0148\001\002\000\026\004\uffd7\023\uffd7\026\uffd7\030\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\053\uffd7\056\uffd7\001" +
    "\002\000\026\004\165\023\uff79\026\154\030\156\041\153" +
    "\042\166\043\175\044\173\053\026\056\163\001\002\000" +
    "\004\023\u0145\001\002\000\004\036\uffd6\001\002\000\004" +
    "\036\u0147\001\002\000\004\026\uffd5\001\002\000\026\004" +
    "\uffd4\023\uffd4\026\uffd4\030\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\053\uffd4\056\uffd4\001\002\000\026\004\165\023" +
    "\uff79\026\154\030\156\041\153\042\166\043\175\044\173" +
    "\053\026\056\163\001\002\000\004\023\u014b\001\002\000" +
    "\004\036\uffd3\001\002\000\004\036\u014d\001\002\000\004" +
    "\026\uffd2\001\002\000\020\023\uffe1\026\025\034\uffe1\036" +
    "\017\051\020\053\026\055\024\001\002\000\006\023\uffe3" +
    "\034\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014d\000\006\002\005\041\006\001\001\000\002\001" +
    "\001\000\006\002\005\041\013\001\001\000\004\042\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\022\006\015\010\026\027\020\057" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\022\006\015\010\026" +
    "\027\020\057\132\001\001\000\004\014\031\001\001\000" +
    "\002\001\001\000\014\004\022\006\015\010\026\027\020" +
    "\057\030\001\001\000\002\001\001\000\004\026\036\001" +
    "\001\000\002\001\001\000\004\014\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\037\001\001\000" +
    "\002\001\001\000\014\017\047\036\053\053\045\056\044" +
    "\064\050\001\001\000\004\120\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\111" +
    "\001\001\000\002\001\001\000\004\116\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\047\035\064\036" +
    "\063\047\061\053\045\056\044\064\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\047\035\067\036\063\047" +
    "\061\053\045\056\044\064\050\001\001\000\002\001\001" +
    "\000\020\017\047\035\072\036\063\047\061\053\045\056" +
    "\044\064\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\047\035\075\036\063\047" +
    "\061\053\045\056\044\064\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\047\035\100\036\063\047" +
    "\061\053\045\056\044\064\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\103\001\001\000\002\001" +
    "\001\000\004\017\105\001\001\000\004\117\107\001\001" +
    "\000\002\001\001\000\004\055\110\001\001\000\002\001" +
    "\001\000\004\052\112\001\001\000\002\001\001\000\006" +
    "\017\047\053\114\001\001\000\004\115\115\001\001\000" +
    "\004\052\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\047\053\045\056\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\134\020\136\001\001\000\002\001\001\000\006\004" +
    "\134\020\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\134\020" +
    "\143\001\001\000\002\001\001\000\014\004\022\006\015" +
    "\010\026\027\020\057\145\001\001\000\002\001\001\000" +
    "\004\066\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\161\005\173\011\157\012\171\015\170\022" +
    "\156\030\166\033\154\040\167\047\175\062\163\064\160" +
    "\001\001\000\004\016\362\001\001\000\032\004\161\005" +
    "\173\011\157\012\171\015\170\022\361\030\166\033\154" +
    "\040\167\047\175\062\163\064\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\202\032\265" +
    "\043\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\200\001\001\000\002\001\001\000" +
    "\032\004\161\005\173\011\157\012\171\015\170\022\177" +
    "\030\166\033\154\040\167\047\175\062\163\064\160\001" +
    "\001\000\002\001\001\000\010\031\202\032\205\043\201" +
    "\001\001\000\004\112\235\001\001\000\004\110\226\001" +
    "\001\000\002\001\001\000\010\031\202\032\224\043\201" +
    "\001\001\000\004\016\217\001\001\000\004\046\210\001" +
    "\001\000\002\001\001\000\004\017\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\161" +
    "\005\173\011\157\012\171\015\170\022\220\030\166\033" +
    "\154\040\167\047\175\062\163\064\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\227\001\001\000\002\001\001\000\004\016\231\001" +
    "\001\000\006\031\232\043\201\001\001\000\004\111\233" +
    "\001\001\000\004\045\234\001\001\000\002\001\001\000" +
    "\004\044\237\001\001\000\004\016\240\001\001\000\002" +
    "\001\001\000\004\043\241\001\001\000\004\113\242\001" +
    "\001\000\004\044\243\001\001\000\002\001\001\000\032" +
    "\004\161\005\173\011\157\012\171\015\170\022\245\030" +
    "\166\033\154\040\167\047\175\062\163\064\160\001\001" +
    "\000\002\001\001\000\004\016\247\001\001\000\010\031" +
    "\202\032\250\043\201\001\001\000\004\016\251\001\001" +
    "\000\032\004\161\005\173\011\157\012\171\015\170\022" +
    "\252\030\166\033\154\040\167\047\175\062\163\064\160" +
    "\001\001\000\002\001\001\000\004\016\254\001\001\000" +
    "\002\001\001\000\032\004\161\005\173\011\157\012\171" +
    "\015\170\022\256\030\166\033\154\040\167\047\175\062" +
    "\163\064\160\001\001\000\002\001\001\000\032\004\161" +
    "\005\173\011\157\012\171\015\170\022\260\030\166\033" +
    "\154\040\167\047\175\062\163\064\160\001\001\000\002" +
    "\001\001\000\032\004\161\005\173\011\157\012\171\015" +
    "\170\022\262\030\166\033\154\040\167\047\175\062\163" +
    "\064\160\001\001\000\002\001\001\000\032\004\161\005" +
    "\173\011\157\012\171\015\170\022\264\030\166\033\154" +
    "\040\167\047\175\062\163\064\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\267\001\001\000\032" +
    "\004\161\005\173\011\157\012\171\015\170\022\270\030" +
    "\166\033\154\040\167\047\175\062\163\064\160\001\001" +
    "\000\002\001\001\000\004\054\275\001\001\000\002\001" +
    "\001\000\004\016\274\001\001\000\002\001\001\000\004" +
    "\016\276\001\001\000\032\004\161\005\173\011\157\012" +
    "\171\015\170\022\277\030\166\033\154\040\167\047\175" +
    "\062\163\064\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\047\036\306\047\305\053\045\056" +
    "\044\064\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\047\035\314\036\063\047" +
    "\061\053\045\056\044\064\050\001\001\000\014\017\047" +
    "\036\312\053\045\056\044\064\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\161\005\173\011\157\012\171\015\170\022" +
    "\317\030\166\033\154\040\167\047\175\062\163\064\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\047\047\325\053\045\056\323\063\326" +
    "\001\001\000\004\060\336\001\001\000\004\060\334\001" +
    "\001\000\004\060\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\047\047\325\053\045\056\323\063\333\001\001\000\002" +
    "\001\001\000\014\017\047\047\325\053\045\056\323\063" +
    "\335\001\001\000\002\001\001\000\014\017\047\047\325" +
    "\053\045\056\323\063\337\001\001\000\002\001\001\000" +
    "\032\004\161\005\173\011\157\012\171\015\170\022\341" +
    "\030\166\033\154\040\167\047\175\062\163\064\160\001" +
    "\001\000\002\001\001\000\032\004\161\005\173\011\157" +
    "\012\171\015\170\022\343\030\166\033\154\040\167\047" +
    "\175\062\163\064\160\001\001\000\002\001\001\000\032" +
    "\004\161\005\173\011\157\012\171\015\170\022\345\030" +
    "\166\033\154\040\167\047\175\062\163\064\160\001\001" +
    "\000\002\001\001\000\004\067\347\001\001\000\002\001" +
    "\001\000\014\004\022\006\015\010\026\027\020\057\351" +
    "\001\001\000\004\021\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\004\161\005\173" +
    "\011\157\012\171\015\170\022\356\030\166\033\154\040" +
    "\167\047\175\062\163\064\160\001\001\000\002\001\001" +
    "\000\032\004\161\005\173\011\157\012\171\015\170\022" +
    "\360\030\166\033\154\040\167\047\175\062\163\064\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\375\001\001\000\004\016\372\001\001\000\032\004\161" +
    "\005\173\011\157\012\171\015\170\022\373\030\166\033" +
    "\154\040\167\047\175\062\163\064\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\376\001\001\000" +
    "\032\004\161\005\173\011\157\012\171\015\170\022\377" +
    "\030\166\033\154\040\167\047\175\062\163\064\160\001" +
    "\001\000\002\001\001\000\004\016\u0101\001\001\000\002" +
    "\001\001\000\014\004\022\006\015\010\026\027\020\057" +
    "\u0103\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0106\001\001\000\002\001\001\000\004\026\u0114\001" +
    "\001\000\006\026\u010a\106\u0109\001\001\000\032\004\161" +
    "\005\173\011\157\012\171\015\170\022\u0110\030\166\033" +
    "\154\040\167\047\175\062\163\064\160\001\001\000\004" +
    "\104\u010b\001\001\000\032\004\161\005\173\011\157\012" +
    "\171\015\170\022\u010c\030\166\033\154\040\167\047\175" +
    "\062\163\064\160\001\001\000\002\001\001\000\004\105" +
    "\u010e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\u0112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0116\001\001" +
    "\000\002\001\001\000\006\026\u0118\102\u0119\001\001\000" +
    "\004\100\u011e\001\001\000\032\004\161\005\173\011\157" +
    "\012\171\015\170\022\u011a\030\166\033\154\040\167\047" +
    "\175\062\163\064\160\001\001\000\002\001\001\000\004" +
    "\103\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\161\005\173\011\157\012\171\015\170\022\u011f" +
    "\030\166\033\154\040\167\047\175\062\163\064\160\001" +
    "\001\000\004\007\u0120\001\001\000\004\042\u012b\001\001" +
    "\000\004\047\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\047\025\u0129\035\072\036\063\047\061\053" +
    "\045\056\044\064\050\001\001\000\004\026\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\u012d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0132\001" +
    "\001\000\002\001\001\000\004\072\u0134\001\001\000\032" +
    "\004\161\005\173\011\157\012\171\015\170\022\u0135\030" +
    "\166\033\154\040\167\047\175\062\163\064\160\001\001" +
    "\000\002\001\001\000\004\073\u0137\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\u013a\001\001\000\032" +
    "\004\161\005\173\011\157\012\171\015\170\022\u013b\030" +
    "\166\033\154\040\167\047\175\062\163\064\160\001\001" +
    "\000\002\001\001\000\004\071\u013d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u0140\001\001\000\002" +
    "\001\001\000\004\074\u0142\001\001\000\032\004\161\005" +
    "\173\011\157\012\171\015\170\022\u0143\030\166\033\154" +
    "\040\167\047\175\062\163\064\160\001\001\000\002\001" +
    "\001\000\004\075\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u0148\001\001\000\032\004\161\005" +
    "\173\011\157\012\171\015\170\022\u0149\030\166\033\154" +
    "\040\167\047\175\062\163\064\160\001\001\000\002\001" +
    "\001\000\004\077\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\022\006\015\010\026\027\020\057" +
    "\u014e\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupArbol$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupArbol$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupArbol$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String resultado="";
        public String temporalNum = "";
        public String temporalNum2 = "";
        public Listas temporalLis = new Listas();
        public Listas temporalLis2 = new Listas();
        public Listas temporalLis3 = new Listas();
	public Nodo padre;
        String tempoVar = "";
          public Tempnuevo temp;
          public Etiquetas etq;
          public int flagT= 0;
          public String flagN= "";
          public Cuadruplo generaracion = new Cuadruplo();
        public Nodo Asignaciones = new Nodo("Asignaciones");
	public int contador = 1;
        public int tam = 0;
        public int conts = 0;
        public int contetq = 0;
             public Tabla tabla = new Tabla();
        


 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

 public void semantic_error(String valor) throws java.lang.Exception {
        Ventana.notificar_er("Error de tipo, el error de tipo , es el error de tipo: "+ valor );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupArbol$actions {




  private final CupArbol parser;

  /** Constructor */
  CUP$CupArbol$actions(CupArbol parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupArbol$do_action_part00000000(
    int                        CUP$CupArbol$act_num,
    java_cup.runtime.lr_parser CUP$CupArbol$parser,
    java.util.Stack            CUP$CupArbol$stack,
    int                        CUP$CupArbol$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupArbol$result;

      /* select the action based on the action number */
      switch (CUP$CupArbol$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		RESULT = start_val;
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupArbol$parser.done_parsing();
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int nCleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int nCright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object nC = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
  generaracion.Funciones("etq", "MAIN"); 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int nCleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int nCright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object nC = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int Cuerpoleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int Cuerporight = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object Cuerpo = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
  generaracion.Funciones("end", "MAIN"); 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= SentenciaModulo Identificador CUERPO_ESTRUCTURA Main NT$0 parentesisE parentesisC CUERPO End NT$1 Sub CUERPO_ESTRUCTURA FINAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).value;
		int nCleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).left;
		int nCright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).right;
		Object nC = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int Cuerpoleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int Cuerporight = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object Cuerpo = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        
        Nodo nd = new Nodo("INICIO");
        
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo(new Nodo(n.toString()));
        nd.addHijo(new Nodo(n1.toString()));
        
        if (nC != null)
        nd.addHijo((Nodo)nC);

        nd.addHijo(new Nodo(n2.toString()));
        // E nd.addHijo(new Nodo(n3.toString() + " " + n4.toString()));

        if (Cuerpo != null)
        nd.addHijo((Nodo)Cuerpo);
        //nd.addHijo(new Nodo(n4.toString()));
       // nd.addHijo(new Nodo(n6.toString()));
        //nd.addHijo((Nodo)n5);
        nd.addHijo(new Nodo(n6.toString() + " " + n7.toString()));
        //nd.addHijo((Nodo)nC2); 
        nd.addHijo((Nodo)n8);
     
/*
        */

        parser.padre = (Nodo)nd;

        RESULT = nd;


              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VARIABLES ::= Identificador coma VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("VARIABLES");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo(new Nodo(n1.toString()));
             // E nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             nd.setValor(n1.toString());
             RESULT = nd;


             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VARIABLES ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
             Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
             nd.setValor(n1.toString());
            
             RESULT = nd;
 



              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPODATO ::= AS Integer 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",20, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= AS Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",20, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= AS String 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",20, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPODATO ::= AS Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",20, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= Dim VARIABLES TIPODATO IGUALDAD 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        Nodo nd = new Nodo("DECLARACION_VAR");
       // E nd.addHijo(new Nodo(n1.toString()));
        nd.setNumNodo(parser.contador++);
    
        nd.addHijo((Nodo)n2);
        nd.addHijo((Nodo)n3);


        if (n4 != null){
        nd.addHijo((Nodo)n4);
        generaracion.Igualdad("=", "ret" , ((Nodo)n2).getValor() );

}
       
        RESULT = nd;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALDAD ::= Igual New Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString() + " " + n2.toString() + " " + n3.toString() ));
            // nd.addHijo(new Nodo(n2.toString()));
            // nd.addHijo(new Nodo(n3.toString()));
            // E nd.addHijo(new Nodo(n4.toString()));
             nd.addHijo((Nodo)n5);
            // E nd.addHijo(new Nodo(n6.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUALDAD ::= Igual Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);

            for(int i = 0; i < temporalLis3.getLista2().size(); i++){
                generaracion.OtraCosa("Param",  temporalLis3.getLista2().get(i) );
            }

                generaracion.OtraCosa("Call", n3.toString() +  "," + temporalLis3.getLista2().size() );
                 temporalLis3 = new Listas();
             nd.addHijo(new Nodo(n1.toString()  + " " + n3.toString() ));
         
             nd.addHijo((Nodo)n5);
            // E nd.addHijo(new Nodo(n6.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUALDAD ::= Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IGUALDAD ::= Igual Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString() +" " + n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IGUALDAD ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= Identificador TIPODATO coma PARAMETROS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETROS ::= Identificador TIPODATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS",19, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATO ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
           Nodo nd = new Nodo ("Aritmeticos");

           
                    nd.setValor(((Nodo)n1).getValor());

                    
            
          
            nd.setNumNodo(parser.contador++);
              
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATO ::= Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            nd.setValor(n1.toString());
          
             //nd.addHijo(new Nodo(n1.toString()));
           
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATO ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo ("Cadena");
            Nodo nodo1 = new Nodo ("Valor Cadena");

            nodo1.setNumNodo(parser.contador++);
            nodo1.setValor(n1.toString());
          
            nd.addHijo(nodo1);
            nd.setValor(n1.toString());
            nd.setNumNodo(parser.contador++);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DATO ::= LEER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = (Nodo)n1;
            nd.setNumNodo(parser.contador++);
            
             //nd.addHijo((Nodo)n1);
             nd.setValor(((Nodo)n1).getValor());
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS2 ::= DATO coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            
            nd.addHijo((Nodo)n1);

            
             temporalLis3.getLista2().add(((Nodo)n1).getValor());
            nd.setValor(((Nodo)n1).getValor());
             
            nd.addHijo((Nodo)n3);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETROS2 ::= DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
           
            nd.addHijo((Nodo)n1);

            temporalLis3.getLista2().add(((Nodo)n1).getValor());
            nd.setValor(((Nodo)n1).getValor());
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETROS2 ::= RECURSION coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
           
           Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            
            nd.addHijo((Nodo)n1);

            
             temporalLis3.getLista2().add(((Nodo)n1).getValor());
            nd.setValor(((Nodo)n1).getValor());
             
            nd.addHijo((Nodo)n3);
             
             RESULT = nd;


             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETROS2 ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
           
            nd.addHijo((Nodo)n1);

            temporalLis3.getLista2().add(((Nodo)n1).getValor());
            nd.setValor(((Nodo)n1).getValor());
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESTRUCTURA ::= struct Identificador PARA_STRUCK End struct 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ESTRUCTURA");
            nd.setNumNodo(parser.contador++);
         
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);

             nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",21, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_ESTRUCTURA ::= DECLARACION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        Nodo nd = new Nodo("CUERPO_FUNCIONES");
        nd.setNumNodo(parser.contador++);
       
        nd.addHijo((Nodo)n1);

        if (n2 != null)
        nd.addHijo((Nodo)n2);
        RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_ESTRUCTURA ::= ESTRUCTURA Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_ESTRUCTURA ::= FUNCION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO_ESTRUCTURA ::= PARA_SUB Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPO_ESTRUCTURA ::= Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
              
            if (n2 != null)
            RESULT = n2;


        
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CUERPO_ESTRUCTURA ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARA_STRUCK ::= DECLARACION Enter PARA_STRUCK 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
   Nodo nd = new Nodo("CUERPO_Estructura");
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo((Nodo)n1);

        if (n2 != null)
        nd.addHijo((Nodo)n2);
        RESULT = nd; 


              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARA_STRUCK ::= Enter PARA_STRUCK 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
 if (n2 != null)
            RESULT = n2;

    
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARA_STRUCK ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$2 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARA_SUB ::= Sub Identificador parentesisE PARAMETROS parentesisC NT$2 CUERPO End NT$3 Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARA_SUB ::= Sub Identificador parentesisE parentesisC NT$4 CUERPO End NT$5 Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
         
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + "" + n3.toString()+""+n4.toString()));
          
             
             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$6 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARA_SUB ::= Sub New parentesisE parentesisC NT$6 CUERPO End NT$7 Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo (new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
         

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$8 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PARA_SUB ::= Sub New parentesisE PARAMETROS parentesisC NT$8 CUERPO End NT$9 Sub 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNO ::= Return Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            //nd.setValor(n2.toString());
            generaracion.OtraCosa("Return",n2.toString());
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNO ::= Return Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            nd.setValor(n2.toString());
            generaracion.OtraCosa("Return",n2.toString());
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNO ::= Return Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RETORNO ::= Return Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNO ::= Return Identificador parentesisE PARAMETROS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNO ::= Return RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$10 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$10",62, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n10 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$11",63, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC TIPODATO NT$10 CUERPO RETORNO DESPUES End NT$11 Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n10left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n10right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n10 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n9 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()));
             //nd.addHijo((Nodo)n6);

             if (n7 != null)
             nd.addHijo((Nodo)n7);
             nd.addHijo(new Nodo(n8.toString()+" "+n9.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-12)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$12 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$12",64, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$13",65, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC NT$12 CUERPO End NT$13 Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$14 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$14",66, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$15",67, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= Function Identificador parentesisE parentesisC TIPODATO NT$14 CUERPO End NT$15 Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+""+n4.toString()));
            
             nd.addHijo((Nodo)n5);

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$16 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("etq",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$16",68, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
generaracion.Funciones("end",n2.toString());
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$17",69, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= Function Identificador parentesisE parentesisC NT$16 CUERPO End NT$17 Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+" "+n4.toString()));
            

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION VALORES_NUMERICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            Listas booli = new Listas();
            
              booli.getVerdadero().add(generaracion.getIntermedio().size() );
            booli.getFalso().add(generaracion.getIntermedio().size() + 1 );

          
            generaracion.Booleanos(((Nodo)n2).getValor(),n1.toString(), ((Nodo)n3).getValor() , "");
            generaracion.Saltos("GOTO","");

            
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             nd.setHijos2(booli);

             RESULT = nd;
               
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);


             Listas booli = new Listas();

             booli.getVerdadero().add(generaracion.getIntermedio().size());
            booli.getFalso().add(generaracion.getIntermedio().size() + 1 );

            generaracion.Booleanos(((Nodo)n2).getValor(),n1.toString(), ((Nodo)n3).getValor() , "");
            generaracion.Saltos("GOTO","");
       
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             nd.setHijos2(booli);


             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
                

                 Listas booli = new Listas();

             booli.getVerdadero().add(generaracion.getIntermedio().size() );
            booli.getFalso().add(generaracion.getIntermedio().size() + 1 );

            generaracion.Booleanos(((Nodo)n2).getValor(),n1.toString(), ((Nodo)n3).getValor() , "");
            generaracion.Saltos("GOTO","");


             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             nd.setHijos2(booli);


             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Comilla Comilla 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
         
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()+" "+n4.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		 
                    

                  Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            Listas booli = new Listas();


            if(((n1.toString()).toLowerCase()).equals("true")){
                
                
                booli.getVerdadero().add( generaracion.getIntermedio().size() );
                generaracion.Saltos("GOTO" , "");

                }else if(((n1.toString()).toLowerCase()).equals("false")){

                    booli.getFalso().add( generaracion.getIntermedio().size());
                    generaracion.Saltos("GOTO" , "");

             }


             nd.addHijo(new Nodo(n1.toString()));
             
             nd.setHijos2(booli);

             RESULT = nd;


                   
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= parentesisE DECLARACION_IF parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		  
     
            RESULT = ((Nodo)n2);

                  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COMPARACION ::= OperadorRelacional 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            nd.setValor(n1.toString());
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("COMPARACION",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COMPARACION ::= Igual 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            nd.setValor(n1.toString());
            
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("COMPARACION",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$18 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
 temporalLis = (((Nodo)n1).getHijos2());  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$18",70, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_IF ::= LOGICOAND NT$18 LOGICOOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		

                
            Nodo nd = new Nodo("DECLARACION_IF");
            nd.setNumNodo(parser.contador++);
           
             
            nd.setValor(((Nodo)n1).getValor());
            
             nd.setHijos2(temporalLis);
            
           
             nd.addHijo((Nodo)n1);

             if (n2 != null){

              nd.setHijos2(temporalLis);
             nd.addHijo((Nodo)n2);
             

              }


             RESULT = nd;



             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",24, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$19 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
        
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

                  Listas booli = new Listas();
            
              generaracion.Completo(temporalLis.getFalso(), n4.toString());
             
              booli.setVerdadero(generaracion.Fusion(temporalLis.getVerdadero(), ((Nodo)n2).getHijos2().getVerdadero()));
              booli.setFalso(((Nodo)n2).getHijos2().getFalso());
             

            // if (n3 != null)
             //nd.addHijo((Nodo)n3);
             nd.setHijos2(booli);
              temporalLis = nd.getHijos2();
             RESULT = nd;

             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$19",71, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LOGICOOR ::= OR M LOGICOAND NT$19 LOGICOOR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOOR",35, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LOGICOOR ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOOR",35, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$20 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
 temporalLis2 = (((Nodo)n1).getHijos2()); 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$20",72, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOGICOAND ::= SENTENCIA_BOOLEANA NT$20 LOGICOAND_Prima 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LOGICOAND");
            nd.setNumNodo(parser.contador++);
          //  parser.contador++;
             nd.addHijo((Nodo)n1);
             nd.setHijos2(temporalLis2);

             if (n2 != null){

              nd.setHijos2(temporalLis2);
             nd.addHijo((Nodo)n2);
           

              }

            RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND",23, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$21 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            Listas booli = new Listas();
            
              generaracion.Completo(temporalLis2.getVerdadero(), n4.toString());
   
              booli.setFalso(generaracion.Fusion(temporalLis2.getFalso(), ((Nodo)n2).getHijos2().getFalso()));
              booli.setVerdadero( ((Nodo)n2).getHijos2().getVerdadero() );
              
             nd.addHijo((Nodo)n2);

            // if (n3 != null)
            // nd.addHijo((Nodo)n3);

             nd.setHijos2(booli);
            
             temporalLis2 = nd.getHijos2();

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$21",73, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LOGICOAND_Prima ::= And M SENTENCIA_BOOLEANA NT$21 LOGICOAND_Prima 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",34, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LOGICOAND_Prima ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",34, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_IF ::= IF DECLARACION_IF then M CUERPO End IF M 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
                
            Nodo nd = new Nodo("SENTENCIA_IF");
            
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
           
            Listas booli = new Listas();

            
             generaracion.Completo(((Nodo)n2).getHijos2().getVerdadero(), n7.toString());
             generaracion.Completo(((Nodo)n2).getHijos2().getFalso(), n8.toString());
             
             
             if (n4 != null){   
             nd.addHijo((Nodo)n4);
            
            booli.setSiguiente(generaracion.Fusion(((Nodo)n2).getHijos2().getFalso() , ((Nodo)n4).getHijos2().getSiguiente() ));
             
                nd.setHijos2(booli);
                
             
            }

          

             nd.addHijo(new Nodo(n5.toString()+" "+n6.toString()));

             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",22, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_IF ::= IF DECLARACION_IF then M CUERPO Else N M CUERPO End IF M 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object m3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int m4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int m4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object m4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_ELSE_IF");
            nd.setNumNodo(parser.contador++);


            
             nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo((Nodo)n2);

               Listas booli = new Listas();
             
             generaracion.Completo(((Nodo)n2).getHijos2().getVerdadero(), m1.toString());
             generaracion.Completo(((Nodo)n2).getHijos2().getFalso(), m2.toString());

            
           
             
            if (n4 != null && n6 != null){
            nd.addHijo((Nodo)n4);
             booli.setSiguiente(generaracion.Fusion(((Listas)m3).getList(), generaracion.Fusion( ((Nodo)n4).getHijos2().getSiguiente(), ((Nodo)n6).getHijos2().getSiguiente()   )  ));
              nd.addHijo((Nodo)n6);
            }
                
            generaracion.Completo(((Listas)m3).getList(), m4.toString());
            nd.addHijo(new Nodo(n5.toString()));
            
            nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));

            nd.setHijos2(booli);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ELSE_IF",25, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-11)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // M ::= 
            {
              Object RESULT =null;
		 int n = (generaracion.getIntermedio().size() ) ; RESULT = n;   
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("M",12, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N ::= 
            {
              Object RESULT =null;
		 Listas booli = new Listas(); booli.getList().add((generaracion.getIntermedio().size() )) ; generaracion.Saltos("GOTO", "" ); RESULT = booli;   
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("N",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$22 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
 temporalNum2 = ((Nodo)n1).getValor() ; if(flagT != 0){ temporalNum2 = flagN; flagT = 0;   } 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$22",74, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARITMETICOS ::= MULTIPLICACIONES NT$22 ADICIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		


            
            Nodo nd = new Nodo("ARITMETICOS");
            nd.setNumNodo(parser.contador++);
           // nd.setValor(((Nodo)n1).getValor());
             nd.setValor(((Nodo)n1).getValor());
             nd.addHijo((Nodo)n1);

             
            
             
             if (n2 != null){
            // conts++;
            // temp = new Tempnuevo(conts);
             nd.setValor(temporalNum2);
            
            //nd.setValor(((Nodo)n2).getValor());

            
            
          //  nd.setValor((generaracion.Operacion(((Nodo)n2).getHijos().get(0).getNombre() , (((Nodo)n1).getValor()) , (((Nodo)n2).getValor()), temp )).getNombre());
                  


                 nd.addHijo((Nodo)n2);
        


}
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ARITMETICOS",44, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$23 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;


            
            conts++;
            temp = new Tempnuevo(conts);
            Nodo nd = new Nodo("ADICIONES");
              
            nd.setNumNodo(parser.contador++);
            nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo((Nodo)n2);

                    
           nd.setValor( (generaracion.Operacion(  n1.toString() , temporalNum2 , ((Nodo)n2).getValor() , temp )).getNombre() ); 
                


               temporalNum2 = nd.getValor(); 

                RESULT = nd;


              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$23",75, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ADICIONES ::= OPRestSuma MULTIPLICACIONES NT$23 ADICIONES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ADICIONES",40, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ADICIONES ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ADICIONES",40, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$24 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
 temporalNum = ((Nodo)n1).getValor(); 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$24",76, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MULTIPLICACIONES ::= VALORES_NUMERICOS NT$24 MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("MULTIPLICACIONES");
            nd.setNumNodo(parser.contador++);
               nd.setValor(((Nodo)n1).getValor());
             nd.addHijo((Nodo)n1);

             
            nd.setValor(temporalNum);
            

             if (n2 != null){
             //conts++;
             //temp = new Tempnuevo(conts);
            
              nd.setValor(temporalNum);


            //nd.setValor((generaracion.Operacion(((Nodo)n2).getHijos().get(0).getNombre() , (((Nodo)n1).getValor()) , ((Nodo)n2).getValor(), temp )).getNombre());
                  
              nd.addHijo((Nodo)n2);

}
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES",41, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$25 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

            conts++;
            temp = new Tempnuevo(conts);
            Nodo nd = new Nodo("MULTIPLICACIONES_PRIMA");
              
            nd.setNumNodo(parser.contador++);
            nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo((Nodo)n2);


           nd.setValor( (generaracion.Operacion(  n1.toString() , temporalNum , ((Nodo)n2).getValor() , temp )).getNombre() ); 
               

               temporalNum = nd.getValor(); 

                RESULT = nd;


              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$25",77, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MULTIPLICACIONES_PRIMA ::= OPMultDiv VALORES_NUMERICOS NT$25 MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",43, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MULTIPLICACIONES_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",43, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALORES_NUMERICOS ::= Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            nd.setValor(n1.toString());

                     
          
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",13, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALORES_NUMERICOS ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		

            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            

            // for (Nodo hijos : Asignaciones.getHijos()) {
            //if ((hijos.getNombre().equals(n1.toString()))) {
              //      nd.setValor(hijos.getValor());
            //}}
            

            nd.setValor(n1.toString());
       
            
        
               
             
           
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",13, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$26 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
 flagT = 1; flagN = temporalNum2;   
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$26",78, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORES_NUMERICOS ::= parentesisE NT$26 ARITMETICOS parentesisC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		



            Nodo nd = new Nodo("VALORES_NUMERICOS");
            nd.addHijo((Nodo)n2);
            nd.setValor(((Nodo)n2).getValor());
            
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",13, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALORES_NUMERICOS ::= Identificador Punto Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		

            conts++;
            temp = new Tempnuevo(conts);

            Nodo nd = new Nodo("VALORES_NUMERICOS");
            nd.setNumNodo(parser.contador++);
        

             String revisar =  tabla.BuscarTipoN(n1.toString());
                    
                Record registro = tabla.esRecord(revisar);
                       
                int tipoReg = registro.buscarOffset(n3.toString());

            nd.addHijo(new Nodo( n1.toString() + "[" + tipoReg  +  "]"  ));
            nd.setValor( (generaracion.Igualdad("=", n1.toString() + "[" + tipoReg  +  "]" , temp)).getNombre()   );
            
                       
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",13, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_RECURSIVIDAD ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_RECURSIVIDAD ::= RECURSION OPRestSuma ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_RECURSIVIDAD ::= RECURSION OPMultDiv ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_RECURSIVIDAD ::= ARITMETICOS OPRestSuma RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_RECURSIVIDAD ::= ARITMETICOS OPMultDiv RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ASIGNACION ::= Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
           Nodo nd = new Nodo("ASIGNACION");
           Nodo nodo1 = new Nodo(n1.toString());
           //conts++;
            //temp = new Tempnuevo(conts);
             nodo1.setValor(((Nodo)n3).getValor());
            nd.addHijo((Nodo)nodo1);


             
             nodo1.setNumNodo(parser.contador++);
             nd.setValor( (generaracion.Igualdad(n2.toString(), (((Nodo)n3).getValor()) , n1.toString()))   );
              
             
             nd.setNumNodo(parser.contador++);



             Asignaciones.addHijo((Nodo)nodo1);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ASIGNACION ::= Identificador Punto Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
           



            
            

               String revisar =  tabla.BuscarTipoN(n1.toString());
                    
                Record registro = tabla.esRecord(revisar);
                       
                int tipoReg = registro.buscarOffset(n3.toString());



                      nd.setValor( (generaracion.Igualdad(n4.toString(), (((Nodo)n5).getValor()) ,n1.toString() + "[" + tipoReg +"]"  )) );
                    //generaracion.Operacion(n4.toString(), (((Nodo)n3).getValor())  , n1.toString() + "[" + tam +"]" );
                                  

                    
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()));
           
             nd.addHijo((Nodo)n5);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ASIGNACION ::= Identificador Igual RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            
          
              generaracion.Igualdad("=", "ret", n1.toString() );

               

            
            
            nd.addHijo(new Nodo(n1.toString() + n2.toString() ));
            
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMPRIMIR ::= Console Punto WriteLine parentesisE CONCATENACION parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() );
            nd.setNumNodo(parser.contador++);


            generaracion.Impres(((Nodo)n5).getValor());
           
             //nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",48, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LEER ::= Console Punto ReadLine parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
             Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString());
            //Nodo nd = new Nodo("LEER");
            nd.setNumNodo(parser.contador++);
            nd.setValor("Read()");
            //nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString()));
            //nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LEER",50, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++; 
          
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString() ));
     
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",30, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo(new Nodo(n2.toString()));
            //nd.addHijo(new Nodo(n3.toString()));;
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",30, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CONCATENACION ::= Cadena CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CONCATENACION ::= ARITMETICOS CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            
             nd.setValor(n1.toString());
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CONCATENACION ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            nd.setValor(((Nodo)n1).getValor());

            nd.addHijo((Nodo)n1);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CONCATENACION ::= RECURSION CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
                
                   Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
                
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONCATENACION ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		 

                Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo((Nodo)n1);
             RESULT = nd;
                
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",49, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONCATENABLES ::= concatenacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CONCATENABLES ::= coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CUERPO ::= DECLARACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo((Nodo)n1);
          
             if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CUERPO ::= IMPRIMIR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            
             nd.addHijo((Nodo)n1);

             if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CUERPO ::= ASIGNACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            
             nd.addHijo((Nodo)n1);

               if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPO ::= SENTENCIA_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo((Nodo)n1);
                 

            nd.setHijos2(((Nodo)n1).getHijos2());

              //if (n2 != null)
             //nd.addHijo((Nodo)n2);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPO ::= ELSE_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
             nd.addHijo((Nodo)n1);
             nd.setHijos2(((Nodo)n1).getHijos2());

              //if (n2 != null)
             //nd.addHijo((Nodo)n2);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CUERPO ::= DECLARACION_FOR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
          
             nd.addHijo((Nodo)n1);

               if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CUERPO ::= WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

               if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CUERPO ::= DO_WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo((Nodo)n1);


              if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CUERPO ::= LEER Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
           
             nd.addHijo((Nodo)n1);

               if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CUERPO ::= LLAMADA_FUNCION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            
             nd.addHijo((Nodo)n1);

               if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CUERPO ::= Comentario Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));

                if (n2 != null){
             nd.addHijo((Nodo)n2);
             nd.setHijos2(((Nodo)n2).getHijos2());
             }
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPO ::= RECURSION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
          
             nd.addHijo((Nodo)n1);
             if (n2 != null)
             nd.addHijo((Nodo)n2);
             //nd.setHijos2(((Nodo)n2).getHijos2());
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPO ::= Enter CUERPO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            
           Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);

             if (n2 != null){
           
             nd.setHijos2(((Nodo)n2).getHijos2());
                RESULT = nd;
             }

          
         

           
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",16, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RECURSION ::= Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);

               for(int i = 0; i < temporalLis3.getLista2().size(); i++){
               
                generaracion.OtraCosa("Param",  temporalLis3.getLista2().get(i) );
            }

                generaracion.OtraCosa("Call", n1.toString() +  "," + temporalLis3.getLista2().size() );
                 temporalLis3 = new Listas();


                  nd.setValor(n1.toString());


              nd.addHijo(new Nodo(n1.toString()));
              //nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             //nd.addHijo(new Nodo(n4.toString()));
             RESULT = nd;
             
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RECURSION",37, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RECURSION ::= Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);

             generaracion.OtraCosa("Call", n1.toString() +  ",0" );
                 temporalLis3 = new Listas();

             nd.setValor(n1.toString());
            
              nd.addHijo(new Nodo(n1.toString()));
             // nd.addHijo(new Nodo(n2.toString()+" "+n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RECURSION",37, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$27 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
  tempoVar = ((Nodo)n2).getHijos().get(0).getNombre();
                generaracion.Booleanos("<",tempoVar,n4.toString() ,""); 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("NT$27",79, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION_FOR ::= For M ASIGNACION TO Numero M NT$27 CUERPO Next M 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object m3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            
            String variable = "";
            Nodo nd = new Nodo("FOR");
            nd.setNumNodo(parser.contador++);
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);
              nd.addHijo(new Nodo(n3.toString() + " " + n4.toString() ));

               

              Listas booli = new Listas();
              booli.getVerdadero().add(Integer.parseInt(m2.toString()));

             
             conts++;
             temp = new Tempnuevo(conts); 
             generaracion.Operacion("+",tempoVar,"1",temp); 
             generaracion.Igualdad("=", temp.getNombre(), tempoVar);
                  
                
            generaracion.Completo(booli.getVerdadero(),Integer.toString(generaracion.getIntermedio().size() + 1) );
            generaracion.Saltos("GOTO", m2.toString() );
               
                 
              

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION_FOR ::= For M ASIGNACION TO Identificador M CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
                        Nodo nd = new Nodo("FOR");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);
              nd.addHijo(new Nodo(n3.toString() + " " + n4.toString() ));
              

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // WHILE ::= While M DECLARACION_IF M CUERPO End While M 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int m4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int m4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object m4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("WHILE");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);

              Listas booli = new Listas();
              generaracion.Completo(((Nodo)n2).getHijos2().getVerdadero(),m2.toString());
              booli.setSiguiente(((Nodo)n2).getHijos2().getFalso());

              


              if (n3 != null){

              nd.addHijo((Nodo)n3);
              //generaracion.Completo(((Nodo)n3).getHijos2().getSiguiente() ,m1.toString());
              generaracion.Completo(((Nodo)n2).getHijos2().getFalso(),Integer.toString( generaracion.getIntermedio().size() + 1));
              generaracion.Saltos("GOTO",m1.toString());
              
              }
              nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
              nd.setHijos2(booli);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DO_WHILE ::= Do While M DECLARACION_IF M CUERPO Loop M 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int m4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int m4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object m4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("DO_WHILE");
            nd.setNumNodo(parser.contador++);
          
              nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));

              Listas booli = new Listas();
              generaracion.Completo(((Nodo)n3).getHijos2().getVerdadero(),m2.toString());
              booli.setSiguiente(((Nodo)n3).getHijos2().getFalso());

              
              nd.addHijo((Nodo)n3);

              if (n4 != null){
              nd.addHijo((Nodo)n4);
                
                 generaracion.Completo(((Nodo)n3).getHijos2().getFalso(),Integer.toString( generaracion.getIntermedio().size() + 1));
              generaracion.Saltos("GOTO",m1.toString());

}                
              nd.addHijo(new Nodo(n5.toString()));
              nd.setHijos2(booli);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // FINAL ::= End SentenciaModulo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		

        Nodo nd = new Nodo("FINAL");
        nd.setNumNodo(parser.contador++);
        parser.contador++;

        nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));
       
         
        RESULT = nd;



              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FINAL",15, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DESPUES ::= Enter DESPUES 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DESPUES",32, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DESPUES ::= Enter 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DESPUES",32, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PROGRAMA ::= Enter PROGRAMA 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PROGRAMA ::= INICIO DESPUES 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupArbol$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupArbol$do_action(
    int                        CUP$CupArbol$act_num,
    java_cup.runtime.lr_parser CUP$CupArbol$parser,
    java.util.Stack            CUP$CupArbol$stack,
    int                        CUP$CupArbol$top)
    throws java.lang.Exception
    {
              return CUP$CupArbol$do_action_part00000000(
                               CUP$CupArbol$act_num,
                               CUP$CupArbol$parser,
                               CUP$CupArbol$stack,
                               CUP$CupArbol$top);
    }
}

}
